// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	TokenAuthScopes  = "TokenAuth.Scopes"
)

// Defines values for EventActivityCode.
const (
	EventActivityCodeAccountCreate                            EventActivityCode = "account.create"
	EventActivityCodeAccountSettingPeerLoginExpirationDisable EventActivityCode = "account.setting.peer.login.expiration.disable"
	EventActivityCodeAccountSettingPeerLoginExpirationEnable  EventActivityCode = "account.setting.peer.login.expiration.enable"
	EventActivityCodeAccountSettingPeerLoginExpirationUpdate  EventActivityCode = "account.setting.peer.login.expiration.update"
	EventActivityCodeDnsSettingDisabledManagementGroupAdd     EventActivityCode = "dns.setting.disabled.management.group.add"
	EventActivityCodeDnsSettingDisabledManagementGroupDelete  EventActivityCode = "dns.setting.disabled.management.group.delete"
	EventActivityCodeGroupAdd                                 EventActivityCode = "group.add"
	EventActivityCodeGroupUpdate                              EventActivityCode = "group.update"
	EventActivityCodeNameserverGroupAdd                       EventActivityCode = "nameserver.group.add"
	EventActivityCodeNameserverGroupDelete                    EventActivityCode = "nameserver.group.delete"
	EventActivityCodeNameserverGroupUpdate                    EventActivityCode = "nameserver.group.update"
	EventActivityCodePeerLoginExpirationDisable               EventActivityCode = "peer.login.expiration.disable"
	EventActivityCodePeerLoginExpirationEnable                EventActivityCode = "peer.login.expiration.enable"
	EventActivityCodePeerLoginExpire                          EventActivityCode = "peer.login.expire"
	EventActivityCodePeerRename                               EventActivityCode = "peer.rename"
	EventActivityCodePeerSshDisable                           EventActivityCode = "peer.ssh.disable"
	EventActivityCodePeerSshEnable                            EventActivityCode = "peer.ssh.enable"
	EventActivityCodePersonalAccessTokenCreate                EventActivityCode = "personal.access.token.create"
	EventActivityCodePersonalAccessTokenDelete                EventActivityCode = "personal.access.token.delete"
	EventActivityCodePolicyAdd                                EventActivityCode = "policy.add"
	EventActivityCodePolicyDelete                             EventActivityCode = "policy.delete"
	EventActivityCodePolicyUpdate                             EventActivityCode = "policy.update"
	EventActivityCodeRouteAdd                                 EventActivityCode = "route.add"
	EventActivityCodeRouteDelete                              EventActivityCode = "route.delete"
	EventActivityCodeRouteUpdate                              EventActivityCode = "route.update"
	EventActivityCodeRuleAdd                                  EventActivityCode = "rule.add"
	EventActivityCodeRuleDelete                               EventActivityCode = "rule.delete"
	EventActivityCodeRuleUpdate                               EventActivityCode = "rule.update"
	EventActivityCodeServiceUserCreate                        EventActivityCode = "service.user.create"
	EventActivityCodeServiceUserDelete                        EventActivityCode = "service.user.delete"
	EventActivityCodeSetupkeyAdd                              EventActivityCode = "setupkey.add"
	EventActivityCodeSetupkeyGroupAdd                         EventActivityCode = "setupkey.group.add"
	EventActivityCodeSetupkeyGroupDelete                      EventActivityCode = "setupkey.group.delete"
	EventActivityCodeSetupkeyOveruse                          EventActivityCode = "setupkey.overuse"
	EventActivityCodeSetupkeyPeerAdd                          EventActivityCode = "setupkey.peer.add"
	EventActivityCodeSetupkeyRevoke                           EventActivityCode = "setupkey.revoke"
	EventActivityCodeSetupkeyUpdate                           EventActivityCode = "setupkey.update"
	EventActivityCodeUserBlock                                EventActivityCode = "user.block"
	EventActivityCodeUserGroupAdd                             EventActivityCode = "user.group.add"
	EventActivityCodeUserGroupDelete                          EventActivityCode = "user.group.delete"
	EventActivityCodeUserInvite                               EventActivityCode = "user.invite"
	EventActivityCodeUserJoin                                 EventActivityCode = "user.join"
	EventActivityCodeUserPeerAdd                              EventActivityCode = "user.peer.add"
	EventActivityCodeUserPeerDelete                           EventActivityCode = "user.peer.delete"
	EventActivityCodeUserPeerLogin                            EventActivityCode = "user.peer.login"
	EventActivityCodeUserRoleUpdate                           EventActivityCode = "user.role.update"
	EventActivityCodeUserUnblock                              EventActivityCode = "user.unblock"
)

// Defines values for GeoLocationCheckAction.
const (
	GeoLocationCheckActionAllow GeoLocationCheckAction = "allow"
	GeoLocationCheckActionDeny  GeoLocationCheckAction = "deny"
)

// Defines values for GroupIssued.
const (
	GroupIssuedApi         GroupIssued = "api"
	GroupIssuedIntegration GroupIssued = "integration"
	GroupIssuedJwt         GroupIssued = "jwt"
)

// Defines values for GroupMinimumIssued.
const (
	GroupMinimumIssuedApi         GroupMinimumIssued = "api"
	GroupMinimumIssuedIntegration GroupMinimumIssued = "integration"
	GroupMinimumIssuedJwt         GroupMinimumIssued = "jwt"
)

// Defines values for NameserverNsType.
const (
	NameserverNsTypeUdp NameserverNsType = "udp"
)

// Defines values for PeerNetworkRangeCheckAction.
const (
	PeerNetworkRangeCheckActionAllow PeerNetworkRangeCheckAction = "allow"
	PeerNetworkRangeCheckActionDeny  PeerNetworkRangeCheckAction = "deny"
)

// Defines values for PolicyRuleAction.
const (
	PolicyRuleActionAccept PolicyRuleAction = "accept"
	PolicyRuleActionDrop   PolicyRuleAction = "drop"
)

// Defines values for PolicyRuleProtocol.
const (
	PolicyRuleProtocolAll  PolicyRuleProtocol = "all"
	PolicyRuleProtocolIcmp PolicyRuleProtocol = "icmp"
	PolicyRuleProtocolTcp  PolicyRuleProtocol = "tcp"
	PolicyRuleProtocolUdp  PolicyRuleProtocol = "udp"
)

// Defines values for PolicyRuleMinimumAction.
const (
	PolicyRuleMinimumActionAccept PolicyRuleMinimumAction = "accept"
	PolicyRuleMinimumActionDrop   PolicyRuleMinimumAction = "drop"
)

// Defines values for PolicyRuleMinimumProtocol.
const (
	PolicyRuleMinimumProtocolAll  PolicyRuleMinimumProtocol = "all"
	PolicyRuleMinimumProtocolIcmp PolicyRuleMinimumProtocol = "icmp"
	PolicyRuleMinimumProtocolTcp  PolicyRuleMinimumProtocol = "tcp"
	PolicyRuleMinimumProtocolUdp  PolicyRuleMinimumProtocol = "udp"
)

// Defines values for PolicyRuleUpdateAction.
const (
	Accept PolicyRuleUpdateAction = "accept"
	Drop   PolicyRuleUpdateAction = "drop"
)

// Defines values for PolicyRuleUpdateProtocol.
const (
	PolicyRuleUpdateProtocolAll  PolicyRuleUpdateProtocol = "all"
	PolicyRuleUpdateProtocolIcmp PolicyRuleUpdateProtocol = "icmp"
	PolicyRuleUpdateProtocolTcp  PolicyRuleUpdateProtocol = "tcp"
	PolicyRuleUpdateProtocolUdp  PolicyRuleUpdateProtocol = "udp"
)

// Defines values for UserStatus.
const (
	UserStatusActive  UserStatus = "active"
	UserStatusBlocked UserStatus = "blocked"
	UserStatusInvited UserStatus = "invited"
)

// Defines values for UserPermissionsDashboardView.
const (
	UserPermissionsDashboardViewBlocked UserPermissionsDashboardView = "blocked"
	UserPermissionsDashboardViewFull    UserPermissionsDashboardView = "full"
	UserPermissionsDashboardViewLimited UserPermissionsDashboardView = "limited"
)

// AccessiblePeer defines model for AccessiblePeer.
type AccessiblePeer struct {
	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// Name Peer's hostname
	Name string `json:"name"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`
}

// Account defines model for Account.
type Account struct {
	// Id Account ID
	Id       string          `json:"id"`
	Settings AccountSettings `json:"settings"`
}

// AccountExtraSettings defines model for AccountExtraSettings.
type AccountExtraSettings struct {
	// PeerApprovalEnabled (Cloud only) Enables or disables peer approval globally. If enabled, all peers added will be in pending state until approved by an admin.
	PeerApprovalEnabled *bool `json:"peer_approval_enabled,omitempty"`
}

// AccountRequest defines model for AccountRequest.
type AccountRequest struct {
	Settings AccountSettings `json:"settings"`
}

// AccountSettings defines model for AccountSettings.
type AccountSettings struct {
	Extra *AccountExtraSettings `json:"extra,omitempty"`

	// GroupsPropagationEnabled Allows propagate the new user auto groups to peers that belongs to the user
	GroupsPropagationEnabled *bool `json:"groups_propagation_enabled,omitempty"`

	// JwtAllowGroups List of groups to which users are allowed access
	JwtAllowGroups *[]string `json:"jwt_allow_groups,omitempty"`

	// JwtGroupsClaimName Name of the claim from which we extract groups names to add it to account groups.
	JwtGroupsClaimName *string `json:"jwt_groups_claim_name,omitempty"`

	// JwtGroupsEnabled Allows extract groups from JWT claim and add it to account groups.
	JwtGroupsEnabled *bool `json:"jwt_groups_enabled,omitempty"`

	// PeerLoginExpiration Period of time after which peer login expires (seconds).
	PeerLoginExpiration int `json:"peer_login_expiration"`

	// PeerLoginExpirationEnabled Enables or disables peer login expiration globally. After peer's login has expired the user has to log in (authenticate). Applies only to peers that were added by a user (interactive SSO login).
	PeerLoginExpirationEnabled bool `json:"peer_login_expiration_enabled"`

	// RegularUsersViewBlocked Allows blocking regular users from viewing parts of the system.
	RegularUsersViewBlocked bool `json:"regular_users_view_blocked"`
}

// Checks List of objects that perform the actual checks
type Checks struct {
	// GeoLocationCheck Posture check for geo location
	GeoLocationCheck *GeoLocationCheck `json:"geo_location_check,omitempty"`

	// NbVersionCheck Posture check for the version of operating system
	NbVersionCheck *NBVersionCheck `json:"nb_version_check,omitempty"`

	// OsVersionCheck Posture check for the version of operating system
	OsVersionCheck *OSVersionCheck `json:"os_version_check,omitempty"`

	// PeerNetworkRangeCheck Posture check for allow or deny access based on peer local network addresses
	PeerNetworkRangeCheck *PeerNetworkRangeCheck `json:"peer_network_range_check,omitempty"`
}

// City Describe city geographical location information
type City struct {
	// CityName Commonly used English name of the city
	CityName string `json:"city_name"`

	// GeonameId Integer ID of the record in GeoNames database
	GeonameId int `json:"geoname_id"`
}

// CityName Commonly used English name of the city
type CityName = string

// Country Describe country geographical location information
type Country struct {
	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// CountryName Commonly used English name of the country
	CountryName string `json:"country_name"`
}

// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
type CountryCode = string

// DNSSettings defines model for DNSSettings.
type DNSSettings struct {
	// DisabledManagementGroups Groups whose DNS management is disabled
	DisabledManagementGroups []string `json:"disabled_management_groups"`
}

// Event defines model for Event.
type Event struct {
	// Activity The activity that occurred during the event
	Activity string `json:"activity"`

	// ActivityCode The string code of the activity that occurred during the event
	ActivityCode EventActivityCode `json:"activity_code"`

	// Id Event unique identifier
	Id string `json:"id"`

	// InitiatorEmail The e-mail address of the initiator of the event. E.g., an e-mail of a user that triggered the event.
	InitiatorEmail string `json:"initiator_email"`

	// InitiatorId The ID of the initiator of the event. E.g., an ID of a user that triggered the event.
	InitiatorId string `json:"initiator_id"`

	// InitiatorName The name of the initiator of the event.
	InitiatorName string `json:"initiator_name"`

	// Meta The metadata of the event
	Meta map[string]string `json:"meta"`

	// TargetId The ID of the target of the event. E.g., an ID of the peer that a user removed.
	TargetId string `json:"target_id"`

	// Timestamp The date and time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// EventActivityCode The string code of the activity that occurred during the event
type EventActivityCode string

// GeoLocationCheck Posture check for geo location
type GeoLocationCheck struct {
	// Action Action to take upon policy match
	Action GeoLocationCheckAction `json:"action"`

	// Locations List of geo locations to which the policy applies
	Locations []Location `json:"locations"`
}

// GeoLocationCheckAction Action to take upon policy match
type GeoLocationCheckAction string

// Group defines model for Group.
type Group struct {
	// Id Group ID
	Id string `json:"id"`

	// Issued How the group was issued (api, integration, jwt)
	Issued *GroupIssued `json:"issued,omitempty"`

	// Name Group Name identifier
	Name string `json:"name"`

	// Peers List of peers object
	Peers []PeerMinimum `json:"peers"`

	// PeersCount Count of peers associated to the group
	PeersCount int `json:"peers_count"`
}

// GroupIssued How the group was issued (api, integration, jwt)
type GroupIssued string

// GroupMinimum defines model for GroupMinimum.
type GroupMinimum struct {
	// Id Group ID
	Id string `json:"id"`

	// Issued How the group was issued (api, integration, jwt)
	Issued *GroupMinimumIssued `json:"issued,omitempty"`

	// Name Group Name identifier
	Name string `json:"name"`

	// PeersCount Count of peers associated to the group
	PeersCount int `json:"peers_count"`
}

// GroupMinimumIssued How the group was issued (api, integration, jwt)
type GroupMinimumIssued string

// GroupRequest defines model for GroupRequest.
type GroupRequest struct {
	// Name Group name identifier
	Name string `json:"name"`

	// Peers List of peers ids
	Peers *[]string `json:"peers,omitempty"`
}

// Location Describe geographical location information
type Location struct {
	// CityName Commonly used English name of the city
	CityName *CityName `json:"city_name,omitempty"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`
}

// MinKernelVersionCheck Posture check with the kernel version
type MinKernelVersionCheck struct {
	// MinKernelVersion Minimum acceptable version
	MinKernelVersion string `json:"min_kernel_version"`
}

// MinVersionCheck Posture check for the version of operating system
type MinVersionCheck struct {
	// MinVersion Minimum acceptable version
	MinVersion string `json:"min_version"`
}

// NBVersionCheck Posture check for the version of operating system
type NBVersionCheck = MinVersionCheck

// Nameserver defines model for Nameserver.
type Nameserver struct {
	// Ip Nameserver IP
	Ip string `json:"ip"`

	// NsType Nameserver Type
	NsType NameserverNsType `json:"ns_type"`

	// Port Nameserver Port
	Port int `json:"port"`
}

// NameserverNsType Nameserver Type
type NameserverNsType string

// NameserverGroup defines model for NameserverGroup.
type NameserverGroup struct {
	// Description Description of the nameserver group
	Description string `json:"description"`

	// Domains Match domain list. It should be empty only if primary is true.
	Domains []string `json:"domains"`

	// Enabled Nameserver group status
	Enabled bool `json:"enabled"`

	// Groups Distribution group IDs that defines group of peers that will use this nameserver group
	Groups []string `json:"groups"`

	// Id Nameserver group ID
	Id string `json:"id"`

	// Name Name of nameserver group name
	Name string `json:"name"`

	// Nameservers Nameserver list
	Nameservers []Nameserver `json:"nameservers"`

	// Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
	Primary bool `json:"primary"`

	// SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
	SearchDomainsEnabled bool `json:"search_domains_enabled"`
}

// NameserverGroupRequest defines model for NameserverGroupRequest.
type NameserverGroupRequest struct {
	// Description Description of the nameserver group
	Description string `json:"description"`

	// Domains Match domain list. It should be empty only if primary is true.
	Domains []string `json:"domains"`

	// Enabled Nameserver group status
	Enabled bool `json:"enabled"`

	// Groups Distribution group IDs that defines group of peers that will use this nameserver group
	Groups []string `json:"groups"`

	// Name Name of nameserver group name
	Name string `json:"name"`

	// Nameservers Nameserver list
	Nameservers []Nameserver `json:"nameservers"`

	// Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
	Primary bool `json:"primary"`

	// SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
	SearchDomainsEnabled bool `json:"search_domains_enabled"`
}

// OSVersionCheck Posture check for the version of operating system
type OSVersionCheck struct {
	// Android Posture check for the version of operating system
	Android *MinVersionCheck `json:"android,omitempty"`

	// Darwin Posture check for the version of operating system
	Darwin *MinVersionCheck `json:"darwin,omitempty"`

	// Ios Posture check for the version of operating system
	Ios *MinVersionCheck `json:"ios,omitempty"`

	// Linux Posture check with the kernel version
	Linux *MinKernelVersionCheck `json:"linux,omitempty"`

	// Windows Posture check with the kernel version
	Windows *MinKernelVersionCheck `json:"windows,omitempty"`
}

// Peer defines model for Peer.
type Peer struct {
	// AccessiblePeers List of accessible peers
	AccessiblePeers []AccessiblePeer `json:"accessible_peers"`

	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired bool `json:"approval_required"`

	// CityName Commonly used English name of the city
	CityName CityName `json:"city_name"`

	// Connected Peer to Management connection status
	Connected bool `json:"connected"`

	// ConnectionIp Peer's public connection IP address
	ConnectionIp string `json:"connection_ip"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// GeonameId Unique identifier from the GeoNames database for a specific geographical location.
	GeonameId int `json:"geoname_id"`

	// Groups Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Hostname Hostname of the machine
	Hostname string `json:"hostname"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// KernelVersion Peer's operating system kernel version
	KernelVersion string `json:"kernel_version"`

	// LastLogin Last time this peer performed log in (authentication). E.g., user authenticated.
	LastLogin time.Time `json:"last_login"`

	// LastSeen Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// LoginExpirationEnabled Indicates whether peer login expiration has been enabled or not
	LoginExpirationEnabled bool `json:"login_expiration_enabled"`

	// LoginExpired Indicates whether peer's login expired or not
	LoginExpired bool `json:"login_expired"`

	// Name Peer's hostname
	Name string `json:"name"`

	// Os Peer's operating system and version
	Os string `json:"os"`

	// SshEnabled Indicates whether SSH server is enabled on this peer
	SshEnabled bool `json:"ssh_enabled"`

	// UiVersion Peer's desktop UI version
	UiVersion string `json:"ui_version"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`

	// Version Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerBase defines model for PeerBase.
type PeerBase struct {
	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired bool `json:"approval_required"`

	// CityName Commonly used English name of the city
	CityName CityName `json:"city_name"`

	// Connected Peer to Management connection status
	Connected bool `json:"connected"`

	// ConnectionIp Peer's public connection IP address
	ConnectionIp string `json:"connection_ip"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// GeonameId Unique identifier from the GeoNames database for a specific geographical location.
	GeonameId int `json:"geoname_id"`

	// Groups Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Hostname Hostname of the machine
	Hostname string `json:"hostname"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// KernelVersion Peer's operating system kernel version
	KernelVersion string `json:"kernel_version"`

	// LastLogin Last time this peer performed log in (authentication). E.g., user authenticated.
	LastLogin time.Time `json:"last_login"`

	// LastSeen Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// LoginExpirationEnabled Indicates whether peer login expiration has been enabled or not
	LoginExpirationEnabled bool `json:"login_expiration_enabled"`

	// LoginExpired Indicates whether peer's login expired or not
	LoginExpired bool `json:"login_expired"`

	// Name Peer's hostname
	Name string `json:"name"`

	// Os Peer's operating system and version
	Os string `json:"os"`

	// SshEnabled Indicates whether SSH server is enabled on this peer
	SshEnabled bool `json:"ssh_enabled"`

	// UiVersion Peer's desktop UI version
	UiVersion string `json:"ui_version"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`

	// Version Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerBatch defines model for PeerBatch.
type PeerBatch struct {
	// AccessiblePeersCount Number of accessible peers
	AccessiblePeersCount int `json:"accessible_peers_count"`

	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired bool `json:"approval_required"`

	// CityName Commonly used English name of the city
	CityName CityName `json:"city_name"`

	// Connected Peer to Management connection status
	Connected bool `json:"connected"`

	// ConnectionIp Peer's public connection IP address
	ConnectionIp string `json:"connection_ip"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// GeonameId Unique identifier from the GeoNames database for a specific geographical location.
	GeonameId int `json:"geoname_id"`

	// Groups Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Hostname Hostname of the machine
	Hostname string `json:"hostname"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// KernelVersion Peer's operating system kernel version
	KernelVersion string `json:"kernel_version"`

	// LastLogin Last time this peer performed log in (authentication). E.g., user authenticated.
	LastLogin time.Time `json:"last_login"`

	// LastSeen Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// LoginExpirationEnabled Indicates whether peer login expiration has been enabled or not
	LoginExpirationEnabled bool `json:"login_expiration_enabled"`

	// LoginExpired Indicates whether peer's login expired or not
	LoginExpired bool `json:"login_expired"`

	// Name Peer's hostname
	Name string `json:"name"`

	// Os Peer's operating system and version
	Os string `json:"os"`

	// SshEnabled Indicates whether SSH server is enabled on this peer
	SshEnabled bool `json:"ssh_enabled"`

	// UiVersion Peer's desktop UI version
	UiVersion string `json:"ui_version"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`

	// Version Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerMinimum defines model for PeerMinimum.
type PeerMinimum struct {
	// Id Peer ID
	Id string `json:"id"`

	// Name Peer's hostname
	Name string `json:"name"`
}

// PeerNetworkRangeCheck Posture check for allow or deny access based on peer local network addresses
type PeerNetworkRangeCheck struct {
	// Action Action to take upon policy match
	Action PeerNetworkRangeCheckAction `json:"action"`

	// Ranges List of peer network ranges in CIDR notation
	Ranges []string `json:"ranges"`
}

// PeerNetworkRangeCheckAction Action to take upon policy match
type PeerNetworkRangeCheckAction string

// PeerRequest defines model for PeerRequest.
type PeerRequest struct {
	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired       *bool  `json:"approval_required,omitempty"`
	LoginExpirationEnabled bool   `json:"login_expiration_enabled"`
	Name                   string `json:"name"`
	SshEnabled             bool   `json:"ssh_enabled"`
}

// PersonalAccessToken defines model for PersonalAccessToken.
type PersonalAccessToken struct {
	// CreatedAt Date the token was created
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User ID of the user who created the token
	CreatedBy string `json:"created_by"`

	// ExpirationDate Date the token expires
	ExpirationDate time.Time `json:"expiration_date"`

	// Id ID of a token
	Id string `json:"id"`

	// LastUsed Date the token was last used
	LastUsed *time.Time `json:"last_used,omitempty"`

	// Name Name of the token
	Name string `json:"name"`
}

// PersonalAccessTokenGenerated defines model for PersonalAccessTokenGenerated.
type PersonalAccessTokenGenerated struct {
	PersonalAccessToken PersonalAccessToken `json:"personal_access_token"`

	// PlainToken Plain text representation of the generated token
	PlainToken string `json:"plain_token"`
}

// PersonalAccessTokenRequest defines model for PersonalAccessTokenRequest.
type PersonalAccessTokenRequest struct {
	// ExpiresIn Expiration in days
	ExpiresIn int `json:"expires_in"`

	// Name Name of the token
	Name string `json:"name"`
}

// Policy defines model for Policy.
type Policy struct {
	// Description Policy friendly description
	Description string `json:"description"`

	// Enabled Policy status
	Enabled bool `json:"enabled"`

	// Id Policy ID
	Id *string `json:"id,omitempty"`

	// Name Policy name identifier
	Name string `json:"name"`

	// Rules Policy rule object for policy UI editor
	Rules []PolicyRule `json:"rules"`

	// SourcePostureChecks Posture checks ID's applied to policy source groups
	SourcePostureChecks []string `json:"source_posture_checks"`
}

// PolicyMinimum defines model for PolicyMinimum.
type PolicyMinimum struct {
	// Description Policy friendly description
	Description string `json:"description"`

	// Enabled Policy status
	Enabled bool `json:"enabled"`

	// Id Policy ID
	Id *string `json:"id,omitempty"`

	// Name Policy name identifier
	Name string `json:"name"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	// Action Policy rule accept or drops packets
	Action PolicyRuleAction `json:"action"`

	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`

	// Description Policy rule friendly description
	Description *string `json:"description,omitempty"`

	// Destinations Policy rule destination group IDs
	Destinations []GroupMinimum `json:"destinations"`

	// Enabled Policy rule status
	Enabled bool `json:"enabled"`

	// Id Policy rule ID
	Id *string `json:"id,omitempty"`

	// Name Policy rule name identifier
	Name string `json:"name"`

	// Ports Policy rule affected ports or it ranges list
	Ports *[]string `json:"ports,omitempty"`

	// Protocol Policy rule type of the traffic
	Protocol PolicyRuleProtocol `json:"protocol"`

	// Sources Policy rule source group IDs
	Sources []GroupMinimum `json:"sources"`
}

// PolicyRuleAction Policy rule accept or drops packets
type PolicyRuleAction string

// PolicyRuleProtocol Policy rule type of the traffic
type PolicyRuleProtocol string

// PolicyRuleMinimum defines model for PolicyRuleMinimum.
type PolicyRuleMinimum struct {
	// Action Policy rule accept or drops packets
	Action PolicyRuleMinimumAction `json:"action"`

	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`

	// Description Policy rule friendly description
	Description *string `json:"description,omitempty"`

	// Enabled Policy rule status
	Enabled bool `json:"enabled"`

	// Id Policy rule ID
	Id *string `json:"id,omitempty"`

	// Name Policy rule name identifier
	Name string `json:"name"`

	// Ports Policy rule affected ports or it ranges list
	Ports *[]string `json:"ports,omitempty"`

	// Protocol Policy rule type of the traffic
	Protocol PolicyRuleMinimumProtocol `json:"protocol"`
}

// PolicyRuleMinimumAction Policy rule accept or drops packets
type PolicyRuleMinimumAction string

// PolicyRuleMinimumProtocol Policy rule type of the traffic
type PolicyRuleMinimumProtocol string

// PolicyRuleUpdate defines model for PolicyRuleUpdate.
type PolicyRuleUpdate struct {
	// Action Policy rule accept or drops packets
	Action PolicyRuleUpdateAction `json:"action"`

	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`

	// Description Policy rule friendly description
	Description *string `json:"description,omitempty"`

	// Destinations Policy rule destination group IDs
	Destinations []string `json:"destinations"`

	// Enabled Policy rule status
	Enabled bool `json:"enabled"`

	// Id Policy rule ID
	Id *string `json:"id,omitempty"`

	// Name Policy rule name identifier
	Name string `json:"name"`

	// Ports Policy rule affected ports or it ranges list
	Ports *[]string `json:"ports,omitempty"`

	// Protocol Policy rule type of the traffic
	Protocol PolicyRuleUpdateProtocol `json:"protocol"`

	// Sources Policy rule source group IDs
	Sources []string `json:"sources"`
}

// PolicyRuleUpdateAction Policy rule accept or drops packets
type PolicyRuleUpdateAction string

// PolicyRuleUpdateProtocol Policy rule type of the traffic
type PolicyRuleUpdateProtocol string

// PolicyUpdate defines model for PolicyUpdate.
type PolicyUpdate struct {
	// Description Policy friendly description
	Description string `json:"description"`

	// Enabled Policy status
	Enabled bool `json:"enabled"`

	// Id Policy ID
	Id *string `json:"id,omitempty"`

	// Name Policy name identifier
	Name string `json:"name"`

	// Rules Policy rule object for policy UI editor
	Rules []PolicyRuleUpdate `json:"rules"`

	// SourcePostureChecks Posture checks ID's applied to policy source groups
	SourcePostureChecks *[]string `json:"source_posture_checks,omitempty"`
}

// PostureCheck defines model for PostureCheck.
type PostureCheck struct {
	// Checks List of objects that perform the actual checks
	Checks Checks `json:"checks"`

	// Description Posture check friendly description
	Description *string `json:"description,omitempty"`

	// Id Posture check ID
	Id string `json:"id"`

	// Name Posture check unique name identifier
	Name string `json:"name"`
}

// PostureCheckUpdate defines model for PostureCheckUpdate.
type PostureCheckUpdate struct {
	// Checks List of objects that perform the actual checks
	Checks *Checks `json:"checks,omitempty"`

	// Description Posture check friendly description
	Description string `json:"description"`

	// Name Posture check name identifier
	Name string `json:"name"`
}

// Route defines model for Route.
type Route struct {
	// Description Route description
	Description string `json:"description"`

	// Enabled Route status
	Enabled bool `json:"enabled"`

	// Groups Group IDs containing routing peers
	Groups []string `json:"groups"`

	// Id Route Id
	Id string `json:"id"`

	// Masquerade Indicate if peer should masquerade traffic to this route's prefix
	Masquerade bool `json:"masquerade"`

	// Metric Route metric number. Lowest number has higher priority
	Metric int `json:"metric"`

	// Network Network range in CIDR format
	Network string `json:"network"`

	// NetworkId Route network identifier, to group HA routes
	NetworkId string `json:"network_id"`

	// NetworkType Network type indicating if it is IPv4 or IPv6
	NetworkType string `json:"network_type"`

	// Peer Peer Identifier associated with route. This property can not be set together with `peer_groups`
	Peer *string `json:"peer,omitempty"`

	// PeerGroups Peers Group Identifier associated with route. This property can not be set together with `peer`
	PeerGroups *[]string `json:"peer_groups,omitempty"`
}

// RouteRequest defines model for RouteRequest.
type RouteRequest struct {
	// Description Route description
	Description string `json:"description"`

	// Enabled Route status
	Enabled bool `json:"enabled"`

	// Groups Group IDs containing routing peers
	Groups []string `json:"groups"`

	// Masquerade Indicate if peer should masquerade traffic to this route's prefix
	Masquerade bool `json:"masquerade"`

	// Metric Route metric number. Lowest number has higher priority
	Metric int `json:"metric"`

	// Network Network range in CIDR format
	Network string `json:"network"`

	// NetworkId Route network identifier, to group HA routes
	NetworkId string `json:"network_id"`

	// Peer Peer Identifier associated with route. This property can not be set together with `peer_groups`
	Peer *string `json:"peer,omitempty"`

	// PeerGroups Peers Group Identifier associated with route. This property can not be set together with `peer`
	PeerGroups *[]string `json:"peer_groups,omitempty"`
}

// SetupKey defines model for SetupKey.
type SetupKey struct {
	// AutoGroups List of group IDs to auto-assign to peers registered with this key
	AutoGroups []string `json:"auto_groups"`

	// Ephemeral Indicate that the peer will be ephemeral or not
	Ephemeral bool `json:"ephemeral"`

	// Expires Setup Key expiration date
	Expires time.Time `json:"expires"`

	// Id Setup Key ID
	Id string `json:"id"`

	// Key Setup Key value
	Key string `json:"key"`

	// LastUsed Setup key last usage date
	LastUsed time.Time `json:"last_used"`

	// Name Setup key name identifier
	Name string `json:"name"`

	// Revoked Setup key revocation status
	Revoked bool `json:"revoked"`

	// State Setup key status, "valid", "overused","expired" or "revoked"
	State string `json:"state"`

	// Type Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`

	// UpdatedAt Setup key last update date
	UpdatedAt time.Time `json:"updated_at"`

	// UsageLimit A number of times this key can be used. The value of 0 indicates the unlimited usage.
	UsageLimit int `json:"usage_limit"`

	// UsedTimes Usage count of setup key
	UsedTimes int `json:"used_times"`

	// Valid Setup key validity status
	Valid bool `json:"valid"`
}

// SetupKeyRequest defines model for SetupKeyRequest.
type SetupKeyRequest struct {
	// AutoGroups List of group IDs to auto-assign to peers registered with this key
	AutoGroups []string `json:"auto_groups"`

	// Ephemeral Indicate that the peer will be ephemeral or not
	Ephemeral *bool `json:"ephemeral,omitempty"`

	// ExpiresIn Expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// Name Setup Key name
	Name string `json:"name"`

	// Revoked Setup key revocation status
	Revoked bool `json:"revoked"`

	// Type Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`

	// UsageLimit A number of times this key can be used. The value of 0 indicates the unlimited usage.
	UsageLimit int `json:"usage_limit"`
}

// User defines model for User.
type User struct {
	// AutoGroups Group IDs to auto-assign to peers registered by this user
	AutoGroups []string `json:"auto_groups"`

	// Email User's email address
	Email string `json:"email"`

	// Id User ID
	Id string `json:"id"`

	// IsBlocked Is true if this user is blocked. Blocked users can't use the system
	IsBlocked bool `json:"is_blocked"`

	// IsCurrent Is true if authenticated user is the same as this user
	IsCurrent *bool `json:"is_current,omitempty"`

	// IsServiceUser Is true if this user is a service user
	IsServiceUser *bool `json:"is_service_user,omitempty"`

	// Issued How user was issued by API or Integration
	Issued *string `json:"issued,omitempty"`

	// LastLogin Last time this user performed a login to the dashboard
	LastLogin *time.Time `json:"last_login,omitempty"`

	// Name User's name from idp provider
	Name        string           `json:"name"`
	Permissions *UserPermissions `json:"permissions,omitempty"`

	// Role User's NetBird account role
	Role string `json:"role"`

	// Status User's status
	Status UserStatus `json:"status"`
}

// UserStatus User's status
type UserStatus string

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	// AutoGroups Group IDs to auto-assign to peers registered by this user
	AutoGroups []string `json:"auto_groups"`

	// Email User's Email to send invite to
	Email *string `json:"email,omitempty"`

	// IsServiceUser Is true if this user is a service user
	IsServiceUser bool `json:"is_service_user"`

	// Name User's full name
	Name *string `json:"name,omitempty"`

	// Role User's NetBird account role
	Role string `json:"role"`
}

// UserPermissions defines model for UserPermissions.
type UserPermissions struct {
	// DashboardView User's permission to view the dashboard
	DashboardView *UserPermissionsDashboardView `json:"dashboard_view,omitempty"`
}

// UserPermissionsDashboardView User's permission to view the dashboard
type UserPermissionsDashboardView string

// UserRequest defines model for UserRequest.
type UserRequest struct {
	// AutoGroups Group IDs to auto-assign to peers registered by this user
	AutoGroups []string `json:"auto_groups"`

	// IsBlocked If set to true then user is blocked and can't use the system
	IsBlocked bool `json:"is_blocked"`

	// Role User's NetBird account role
	Role string `json:"role"`
}

// GetApiUsersParams defines parameters for GetApiUsers.
type GetApiUsersParams struct {
	// ServiceUser Filters users and returns either regular users or service users
	ServiceUser *bool `form:"service_user,omitempty" json:"service_user,omitempty"`
}

// PutApiAccountsAccountIdJSONRequestBody defines body for PutApiAccountsAccountId for application/json ContentType.
type PutApiAccountsAccountIdJSONRequestBody = AccountRequest

// PostApiDnsNameserversJSONRequestBody defines body for PostApiDnsNameservers for application/json ContentType.
type PostApiDnsNameserversJSONRequestBody = NameserverGroupRequest

// PutApiDnsNameserversNsgroupIdJSONRequestBody defines body for PutApiDnsNameserversNsgroupId for application/json ContentType.
type PutApiDnsNameserversNsgroupIdJSONRequestBody = NameserverGroupRequest

// PutApiDnsSettingsJSONRequestBody defines body for PutApiDnsSettings for application/json ContentType.
type PutApiDnsSettingsJSONRequestBody = DNSSettings

// PostApiGroupsJSONRequestBody defines body for PostApiGroups for application/json ContentType.
type PostApiGroupsJSONRequestBody = GroupRequest

// PutApiGroupsGroupIdJSONRequestBody defines body for PutApiGroupsGroupId for application/json ContentType.
type PutApiGroupsGroupIdJSONRequestBody = GroupRequest

// PutApiPeersPeerIdJSONRequestBody defines body for PutApiPeersPeerId for application/json ContentType.
type PutApiPeersPeerIdJSONRequestBody = PeerRequest

// PostApiPoliciesJSONRequestBody defines body for PostApiPolicies for application/json ContentType.
type PostApiPoliciesJSONRequestBody = PolicyUpdate

// PutApiPoliciesPolicyIdJSONRequestBody defines body for PutApiPoliciesPolicyId for application/json ContentType.
type PutApiPoliciesPolicyIdJSONRequestBody = PolicyUpdate

// PostApiPostureChecksJSONRequestBody defines body for PostApiPostureChecks for application/json ContentType.
type PostApiPostureChecksJSONRequestBody = PostureCheckUpdate

// PutApiPostureChecksPostureCheckIdJSONRequestBody defines body for PutApiPostureChecksPostureCheckId for application/json ContentType.
type PutApiPostureChecksPostureCheckIdJSONRequestBody = PostureCheckUpdate

// PostApiRoutesJSONRequestBody defines body for PostApiRoutes for application/json ContentType.
type PostApiRoutesJSONRequestBody = RouteRequest

// PutApiRoutesRouteIdJSONRequestBody defines body for PutApiRoutesRouteId for application/json ContentType.
type PutApiRoutesRouteIdJSONRequestBody = RouteRequest

// PostApiSetupKeysJSONRequestBody defines body for PostApiSetupKeys for application/json ContentType.
type PostApiSetupKeysJSONRequestBody = SetupKeyRequest

// PutApiSetupKeysKeyIdJSONRequestBody defines body for PutApiSetupKeysKeyId for application/json ContentType.
type PutApiSetupKeysKeyIdJSONRequestBody = SetupKeyRequest

// PostApiUsersJSONRequestBody defines body for PostApiUsers for application/json ContentType.
type PostApiUsersJSONRequestBody = UserCreateRequest

// PutApiUsersUserIdJSONRequestBody defines body for PutApiUsersUserId for application/json ContentType.
type PutApiUsersUserIdJSONRequestBody = UserRequest

// PostApiUsersUserIdTokensJSONRequestBody defines body for PostApiUsersUserIdTokens for application/json ContentType.
type PostApiUsersUserIdTokensJSONRequestBody = PersonalAccessTokenRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiAccounts request
	GetApiAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiAccountsAccountId request
	DeleteApiAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiAccountsAccountIdWithBody request with any body
	PutApiAccountsAccountIdWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiAccountsAccountId(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsNameservers request
	GetApiDnsNameservers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsNameserversWithBody request with any body
	PostApiDnsNameserversWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDnsNameservers(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsNameserversNsgroupId request
	DeleteApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsNameserversNsgroupId request
	GetApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDnsNameserversNsgroupIdWithBody request with any body
	PutApiDnsNameserversNsgroupIdWithBody(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsSettings request
	GetApiDnsSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDnsSettingsWithBody request with any body
	PutApiDnsSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDnsSettings(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiEvents request
	GetApiEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGroups request
	GetApiGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiGroupsWithBody request with any body
	PostApiGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiGroups(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiGroupsGroupId request
	DeleteApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGroupsGroupId request
	GetApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiGroupsGroupIdWithBody request with any body
	PutApiGroupsGroupIdWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiGroupsGroupId(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLocationsCountries request
	GetApiLocationsCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLocationsCountriesCountryCities request
	GetApiLocationsCountriesCountryCities(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPeers request
	GetApiPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPeersPeerId request
	DeleteApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPeersPeerId request
	GetApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPeersPeerIdWithBody request with any body
	PutApiPeersPeerIdWithBody(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPeersPeerId(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPolicies request
	GetApiPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPoliciesWithBody request with any body
	PostApiPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPolicies(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPoliciesPolicyId request
	DeleteApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPoliciesPolicyId request
	GetApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPoliciesPolicyIdWithBody request with any body
	PutApiPoliciesPolicyIdWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPoliciesPolicyId(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPostureChecks request
	GetApiPostureChecks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPostureChecksWithBody request with any body
	PostApiPostureChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPostureChecks(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPostureChecksPostureCheckId request
	DeleteApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPostureChecksPostureCheckId request
	GetApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPostureChecksPostureCheckIdWithBody request with any body
	PutApiPostureChecksPostureCheckIdWithBody(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoutes request
	GetApiRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoutesWithBody request with any body
	PostApiRoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoutes(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRoutesRouteId request
	DeleteApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoutesRouteId request
	GetApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRoutesRouteIdWithBody request with any body
	PutApiRoutesRouteIdWithBody(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRoutesRouteId(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSetupKeys request
	GetApiSetupKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSetupKeysWithBody request with any body
	PostApiSetupKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSetupKeys(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSetupKeysKeyId request
	GetApiSetupKeysKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiSetupKeysKeyIdWithBody request with any body
	PutApiSetupKeysKeyIdWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiSetupKeysKeyId(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsers request
	GetApiUsers(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersWithBody request with any body
	PostApiUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUsers(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiUsersUserId request
	DeleteApiUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiUsersUserIdWithBody request with any body
	PutApiUsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiUsersUserId(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersUserIdInvite request
	PostApiUsersUserIdInvite(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsersUserIdTokens request
	GetApiUsersUserIdTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersUserIdTokensWithBody request with any body
	PostApiUsersUserIdTokensWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUsersUserIdTokens(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiUsersUserIdTokensTokenId request
	DeleteApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsersUserIdTokensTokenId request
	GetApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiAccountsAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAccountsAccountIdWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAccountsAccountIdRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAccountsAccountId(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAccountsAccountIdRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsNameservers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsNameserversRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsNameserversWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsNameserversRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsNameservers(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsNameserversRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsNameserversNsgroupIdRequest(c.Server, nsgroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsNameserversNsgroupIdRequest(c.Server, nsgroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsNameserversNsgroupIdWithBody(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsNameserversNsgroupIdRequestWithBody(c.Server, nsgroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsNameserversNsgroupIdRequest(c.Server, nsgroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsSettings(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGroups(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiGroupsGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGroupsGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiGroupsGroupIdWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiGroupsGroupIdRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiGroupsGroupId(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiGroupsGroupIdRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLocationsCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLocationsCountriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLocationsCountriesCountryCities(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLocationsCountriesCountryCitiesRequest(c.Server, country)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPeersPeerIdRequest(c.Server, peerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPeersPeerIdRequest(c.Server, peerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPeersPeerIdWithBody(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPeersPeerIdRequestWithBody(c.Server, peerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPeersPeerId(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPeersPeerIdRequest(c.Server, peerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPolicies(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPoliciesPolicyIdRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoliciesPolicyIdRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPoliciesPolicyIdWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPoliciesPolicyIdRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPoliciesPolicyId(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPoliciesPolicyIdRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPostureChecks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPostureChecksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPostureChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPostureChecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPostureChecks(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPostureChecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPostureChecksPostureCheckIdRequest(c.Server, postureCheckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPostureChecksPostureCheckIdRequest(c.Server, postureCheckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPostureChecksPostureCheckIdWithBody(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPostureChecksPostureCheckIdRequestWithBody(c.Server, postureCheckId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPostureChecksPostureCheckIdRequest(c.Server, postureCheckId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoutesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoutes(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoutesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRoutesRouteIdRequest(c.Server, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoutesRouteIdRequest(c.Server, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRoutesRouteIdWithBody(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRoutesRouteIdRequestWithBody(c.Server, routeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRoutesRouteId(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRoutesRouteIdRequest(c.Server, routeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSetupKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSetupKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSetupKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSetupKeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSetupKeys(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSetupKeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSetupKeysKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSetupKeysKeyIdRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSetupKeysKeyIdWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSetupKeysKeyIdRequestWithBody(c.Server, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSetupKeysKeyId(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSetupKeysKeyIdRequest(c.Server, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsers(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsers(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiUsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUsersUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUsersUserId(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUsersUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersUserIdInvite(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersUserIdInviteRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsersUserIdTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersUserIdTokensRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersUserIdTokensWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersUserIdTokensRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersUserIdTokens(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersUserIdTokensRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiUsersUserIdTokensTokenIdRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersUserIdTokensTokenIdRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiAccountsRequest generates requests for GetApiAccounts
func NewGetApiAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiAccountsAccountIdRequest generates requests for DeleteApiAccountsAccountId
func NewDeleteApiAccountsAccountIdRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiAccountsAccountIdRequest calls the generic PutApiAccountsAccountId builder with application/json body
func NewPutApiAccountsAccountIdRequest(server string, accountId string, body PutApiAccountsAccountIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiAccountsAccountIdRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewPutApiAccountsAccountIdRequestWithBody generates requests for PutApiAccountsAccountId with any type of body
func NewPutApiAccountsAccountIdRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDnsNameserversRequest generates requests for GetApiDnsNameservers
func NewGetApiDnsNameserversRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiDnsNameserversRequest calls the generic PostApiDnsNameservers builder with application/json body
func NewPostApiDnsNameserversRequest(server string, body PostApiDnsNameserversJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDnsNameserversRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiDnsNameserversRequestWithBody generates requests for PostApiDnsNameservers with any type of body
func NewPostApiDnsNameserversRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiDnsNameserversNsgroupIdRequest generates requests for DeleteApiDnsNameserversNsgroupId
func NewDeleteApiDnsNameserversNsgroupIdRequest(server string, nsgroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsgroupId", runtime.ParamLocationPath, nsgroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDnsNameserversNsgroupIdRequest generates requests for GetApiDnsNameserversNsgroupId
func NewGetApiDnsNameserversNsgroupIdRequest(server string, nsgroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsgroupId", runtime.ParamLocationPath, nsgroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDnsNameserversNsgroupIdRequest calls the generic PutApiDnsNameserversNsgroupId builder with application/json body
func NewPutApiDnsNameserversNsgroupIdRequest(server string, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDnsNameserversNsgroupIdRequestWithBody(server, nsgroupId, "application/json", bodyReader)
}

// NewPutApiDnsNameserversNsgroupIdRequestWithBody generates requests for PutApiDnsNameserversNsgroupId with any type of body
func NewPutApiDnsNameserversNsgroupIdRequestWithBody(server string, nsgroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsgroupId", runtime.ParamLocationPath, nsgroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDnsSettingsRequest generates requests for GetApiDnsSettings
func NewGetApiDnsSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDnsSettingsRequest calls the generic PutApiDnsSettings builder with application/json body
func NewPutApiDnsSettingsRequest(server string, body PutApiDnsSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDnsSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiDnsSettingsRequestWithBody generates requests for PutApiDnsSettings with any type of body
func NewPutApiDnsSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiEventsRequest generates requests for GetApiEvents
func NewGetApiEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGroupsRequest generates requests for GetApiGroups
func NewGetApiGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiGroupsRequest calls the generic PostApiGroups builder with application/json body
func NewPostApiGroupsRequest(server string, body PostApiGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiGroupsRequestWithBody generates requests for PostApiGroups with any type of body
func NewPostApiGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiGroupsGroupIdRequest generates requests for DeleteApiGroupsGroupId
func NewDeleteApiGroupsGroupIdRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGroupsGroupIdRequest generates requests for GetApiGroupsGroupId
func NewGetApiGroupsGroupIdRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiGroupsGroupIdRequest calls the generic PutApiGroupsGroupId builder with application/json body
func NewPutApiGroupsGroupIdRequest(server string, groupId string, body PutApiGroupsGroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiGroupsGroupIdRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutApiGroupsGroupIdRequestWithBody generates requests for PutApiGroupsGroupId with any type of body
func NewPutApiGroupsGroupIdRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiLocationsCountriesRequest generates requests for GetApiLocationsCountries
func NewGetApiLocationsCountriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/locations/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiLocationsCountriesCountryCitiesRequest generates requests for GetApiLocationsCountriesCountryCities
func NewGetApiLocationsCountriesCountryCitiesRequest(server string, country Country) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country", runtime.ParamLocationPath, country)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/locations/countries/%s/cities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPeersRequest generates requests for GetApiPeers
func NewGetApiPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiPeersPeerIdRequest generates requests for DeleteApiPeersPeerId
func NewDeleteApiPeersPeerIdRequest(server string, peerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "peerId", runtime.ParamLocationPath, peerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPeersPeerIdRequest generates requests for GetApiPeersPeerId
func NewGetApiPeersPeerIdRequest(server string, peerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "peerId", runtime.ParamLocationPath, peerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPeersPeerIdRequest calls the generic PutApiPeersPeerId builder with application/json body
func NewPutApiPeersPeerIdRequest(server string, peerId string, body PutApiPeersPeerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPeersPeerIdRequestWithBody(server, peerId, "application/json", bodyReader)
}

// NewPutApiPeersPeerIdRequestWithBody generates requests for PutApiPeersPeerId with any type of body
func NewPutApiPeersPeerIdRequestWithBody(server string, peerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "peerId", runtime.ParamLocationPath, peerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPoliciesRequest generates requests for GetApiPolicies
func NewGetApiPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPoliciesRequest calls the generic PostApiPolicies builder with application/json body
func NewPostApiPoliciesRequest(server string, body PostApiPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPoliciesRequestWithBody generates requests for PostApiPolicies with any type of body
func NewPostApiPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPoliciesPolicyIdRequest generates requests for DeleteApiPoliciesPolicyId
func NewDeleteApiPoliciesPolicyIdRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPoliciesPolicyIdRequest generates requests for GetApiPoliciesPolicyId
func NewGetApiPoliciesPolicyIdRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPoliciesPolicyIdRequest calls the generic PutApiPoliciesPolicyId builder with application/json body
func NewPutApiPoliciesPolicyIdRequest(server string, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPoliciesPolicyIdRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewPutApiPoliciesPolicyIdRequestWithBody generates requests for PutApiPoliciesPolicyId with any type of body
func NewPutApiPoliciesPolicyIdRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPostureChecksRequest generates requests for GetApiPostureChecks
func NewGetApiPostureChecksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPostureChecksRequest calls the generic PostApiPostureChecks builder with application/json body
func NewPostApiPostureChecksRequest(server string, body PostApiPostureChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPostureChecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPostureChecksRequestWithBody generates requests for PostApiPostureChecks with any type of body
func NewPostApiPostureChecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPostureChecksPostureCheckIdRequest generates requests for DeleteApiPostureChecksPostureCheckId
func NewDeleteApiPostureChecksPostureCheckIdRequest(server string, postureCheckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postureCheckId", runtime.ParamLocationPath, postureCheckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPostureChecksPostureCheckIdRequest generates requests for GetApiPostureChecksPostureCheckId
func NewGetApiPostureChecksPostureCheckIdRequest(server string, postureCheckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postureCheckId", runtime.ParamLocationPath, postureCheckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPostureChecksPostureCheckIdRequest calls the generic PutApiPostureChecksPostureCheckId builder with application/json body
func NewPutApiPostureChecksPostureCheckIdRequest(server string, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPostureChecksPostureCheckIdRequestWithBody(server, postureCheckId, "application/json", bodyReader)
}

// NewPutApiPostureChecksPostureCheckIdRequestWithBody generates requests for PutApiPostureChecksPostureCheckId with any type of body
func NewPutApiPostureChecksPostureCheckIdRequestWithBody(server string, postureCheckId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postureCheckId", runtime.ParamLocationPath, postureCheckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRoutesRequest generates requests for GetApiRoutes
func NewGetApiRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoutesRequest calls the generic PostApiRoutes builder with application/json body
func NewPostApiRoutesRequest(server string, body PostApiRoutesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoutesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRoutesRequestWithBody generates requests for PostApiRoutes with any type of body
func NewPostApiRoutesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRoutesRouteIdRequest generates requests for DeleteApiRoutesRouteId
func NewDeleteApiRoutesRouteIdRequest(server string, routeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoutesRouteIdRequest generates requests for GetApiRoutesRouteId
func NewGetApiRoutesRouteIdRequest(server string, routeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRoutesRouteIdRequest calls the generic PutApiRoutesRouteId builder with application/json body
func NewPutApiRoutesRouteIdRequest(server string, routeId string, body PutApiRoutesRouteIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRoutesRouteIdRequestWithBody(server, routeId, "application/json", bodyReader)
}

// NewPutApiRoutesRouteIdRequestWithBody generates requests for PutApiRoutesRouteId with any type of body
func NewPutApiRoutesRouteIdRequestWithBody(server string, routeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSetupKeysRequest generates requests for GetApiSetupKeys
func NewGetApiSetupKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSetupKeysRequest calls the generic PostApiSetupKeys builder with application/json body
func NewPostApiSetupKeysRequest(server string, body PostApiSetupKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSetupKeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiSetupKeysRequestWithBody generates requests for PostApiSetupKeys with any type of body
func NewPostApiSetupKeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSetupKeysKeyIdRequest generates requests for GetApiSetupKeysKeyId
func NewGetApiSetupKeysKeyIdRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiSetupKeysKeyIdRequest calls the generic PutApiSetupKeysKeyId builder with application/json body
func NewPutApiSetupKeysKeyIdRequest(server string, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiSetupKeysKeyIdRequestWithBody(server, keyId, "application/json", bodyReader)
}

// NewPutApiSetupKeysKeyIdRequestWithBody generates requests for PutApiSetupKeysKeyId with any type of body
func NewPutApiSetupKeysKeyIdRequestWithBody(server string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiUsersRequest generates requests for GetApiUsers
func NewGetApiUsersRequest(server string, params *GetApiUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_user", runtime.ParamLocationQuery, *params.ServiceUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiUsersRequest calls the generic PostApiUsers builder with application/json body
func NewPostApiUsersRequest(server string, body PostApiUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiUsersRequestWithBody generates requests for PostApiUsers with any type of body
func NewPostApiUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiUsersUserIdRequest generates requests for DeleteApiUsersUserId
func NewDeleteApiUsersUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiUsersUserIdRequest calls the generic PutApiUsersUserId builder with application/json body
func NewPutApiUsersUserIdRequest(server string, userId string, body PutApiUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiUsersUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPutApiUsersUserIdRequestWithBody generates requests for PutApiUsersUserId with any type of body
func NewPutApiUsersUserIdRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiUsersUserIdInviteRequest generates requests for PostApiUsersUserIdInvite
func NewPostApiUsersUserIdInviteRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUsersUserIdTokensRequest generates requests for GetApiUsersUserIdTokens
func NewGetApiUsersUserIdTokensRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiUsersUserIdTokensRequest calls the generic PostApiUsersUserIdTokens builder with application/json body
func NewPostApiUsersUserIdTokensRequest(server string, userId string, body PostApiUsersUserIdTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUsersUserIdTokensRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostApiUsersUserIdTokensRequestWithBody generates requests for PostApiUsersUserIdTokens with any type of body
func NewPostApiUsersUserIdTokensRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiUsersUserIdTokensTokenIdRequest generates requests for DeleteApiUsersUserIdTokensTokenId
func NewDeleteApiUsersUserIdTokensTokenIdRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUsersUserIdTokensTokenIdRequest generates requests for GetApiUsersUserIdTokensTokenId
func NewGetApiUsersUserIdTokensTokenIdRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiAccountsWithResponse request
	GetApiAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAccountsResponse, error)

	// DeleteApiAccountsAccountIdWithResponse request
	DeleteApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteApiAccountsAccountIdResponse, error)

	// PutApiAccountsAccountIdWithBodyWithResponse request with any body
	PutApiAccountsAccountIdWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error)

	PutApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error)

	// GetApiDnsNameserversWithResponse request
	GetApiDnsNameserversWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversResponse, error)

	// PostApiDnsNameserversWithBodyWithResponse request with any body
	PostApiDnsNameserversWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error)

	PostApiDnsNameserversWithResponse(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error)

	// DeleteApiDnsNameserversNsgroupIdWithResponse request
	DeleteApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*DeleteApiDnsNameserversNsgroupIdResponse, error)

	// GetApiDnsNameserversNsgroupIdWithResponse request
	GetApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversNsgroupIdResponse, error)

	// PutApiDnsNameserversNsgroupIdWithBodyWithResponse request with any body
	PutApiDnsNameserversNsgroupIdWithBodyWithResponse(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error)

	PutApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error)

	// GetApiDnsSettingsWithResponse request
	GetApiDnsSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsSettingsResponse, error)

	// PutApiDnsSettingsWithBodyWithResponse request with any body
	PutApiDnsSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error)

	PutApiDnsSettingsWithResponse(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error)

	// GetApiEventsWithResponse request
	GetApiEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiEventsResponse, error)

	// GetApiGroupsWithResponse request
	GetApiGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGroupsResponse, error)

	// PostApiGroupsWithBodyWithResponse request with any body
	PostApiGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error)

	PostApiGroupsWithResponse(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error)

	// DeleteApiGroupsGroupIdWithResponse request
	DeleteApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*DeleteApiGroupsGroupIdResponse, error)

	// GetApiGroupsGroupIdWithResponse request
	GetApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetApiGroupsGroupIdResponse, error)

	// PutApiGroupsGroupIdWithBodyWithResponse request with any body
	PutApiGroupsGroupIdWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error)

	PutApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error)

	// GetApiLocationsCountriesWithResponse request
	GetApiLocationsCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesResponse, error)

	// GetApiLocationsCountriesCountryCitiesWithResponse request
	GetApiLocationsCountriesCountryCitiesWithResponse(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesCountryCitiesResponse, error)

	// GetApiPeersWithResponse request
	GetApiPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPeersResponse, error)

	// DeleteApiPeersPeerIdWithResponse request
	DeleteApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*DeleteApiPeersPeerIdResponse, error)

	// GetApiPeersPeerIdWithResponse request
	GetApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*GetApiPeersPeerIdResponse, error)

	// PutApiPeersPeerIdWithBodyWithResponse request with any body
	PutApiPeersPeerIdWithBodyWithResponse(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error)

	PutApiPeersPeerIdWithResponse(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error)

	// GetApiPoliciesWithResponse request
	GetApiPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPoliciesResponse, error)

	// PostApiPoliciesWithBodyWithResponse request with any body
	PostApiPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error)

	PostApiPoliciesWithResponse(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error)

	// DeleteApiPoliciesPolicyIdWithResponse request
	DeleteApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*DeleteApiPoliciesPolicyIdResponse, error)

	// GetApiPoliciesPolicyIdWithResponse request
	GetApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetApiPoliciesPolicyIdResponse, error)

	// PutApiPoliciesPolicyIdWithBodyWithResponse request with any body
	PutApiPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error)

	PutApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error)

	// GetApiPostureChecksWithResponse request
	GetApiPostureChecksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPostureChecksResponse, error)

	// PostApiPostureChecksWithBodyWithResponse request with any body
	PostApiPostureChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error)

	PostApiPostureChecksWithResponse(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error)

	// DeleteApiPostureChecksPostureCheckIdWithResponse request
	DeleteApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*DeleteApiPostureChecksPostureCheckIdResponse, error)

	// GetApiPostureChecksPostureCheckIdWithResponse request
	GetApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*GetApiPostureChecksPostureCheckIdResponse, error)

	// PutApiPostureChecksPostureCheckIdWithBodyWithResponse request with any body
	PutApiPostureChecksPostureCheckIdWithBodyWithResponse(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error)

	PutApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error)

	// GetApiRoutesWithResponse request
	GetApiRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRoutesResponse, error)

	// PostApiRoutesWithBodyWithResponse request with any body
	PostApiRoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error)

	PostApiRoutesWithResponse(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error)

	// DeleteApiRoutesRouteIdWithResponse request
	DeleteApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*DeleteApiRoutesRouteIdResponse, error)

	// GetApiRoutesRouteIdWithResponse request
	GetApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*GetApiRoutesRouteIdResponse, error)

	// PutApiRoutesRouteIdWithBodyWithResponse request with any body
	PutApiRoutesRouteIdWithBodyWithResponse(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error)

	PutApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error)

	// GetApiSetupKeysWithResponse request
	GetApiSetupKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSetupKeysResponse, error)

	// PostApiSetupKeysWithBodyWithResponse request with any body
	PostApiSetupKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error)

	PostApiSetupKeysWithResponse(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error)

	// GetApiSetupKeysKeyIdWithResponse request
	GetApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*GetApiSetupKeysKeyIdResponse, error)

	// PutApiSetupKeysKeyIdWithBodyWithResponse request with any body
	PutApiSetupKeysKeyIdWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error)

	PutApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error)

	// GetApiUsersWithResponse request
	GetApiUsersWithResponse(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*GetApiUsersResponse, error)

	// PostApiUsersWithBodyWithResponse request with any body
	PostApiUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error)

	PostApiUsersWithResponse(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error)

	// DeleteApiUsersUserIdWithResponse request
	DeleteApiUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdResponse, error)

	// PutApiUsersUserIdWithBodyWithResponse request with any body
	PutApiUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error)

	PutApiUsersUserIdWithResponse(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error)

	// PostApiUsersUserIdInviteWithResponse request
	PostApiUsersUserIdInviteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdInviteResponse, error)

	// GetApiUsersUserIdTokensWithResponse request
	GetApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensResponse, error)

	// PostApiUsersUserIdTokensWithBodyWithResponse request with any body
	PostApiUsersUserIdTokensWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error)

	PostApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error)

	// DeleteApiUsersUserIdTokensTokenIdWithResponse request
	DeleteApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdTokensTokenIdResponse, error)

	// GetApiUsersUserIdTokensTokenIdWithResponse request
	GetApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensTokenIdResponse, error)
}

type GetApiAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r PutApiAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NameserverGroup
}

// Status returns HTTPResponse.Status
func (r GetApiDnsNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameserverGroup
}

// Status returns HTTPResponse.Status
func (r PostApiDnsNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsNameserversNsgroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsNameserversNsgroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsNameserversNsgroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsNameserversNsgroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameserverGroup
}

// Status returns HTTPResponse.Status
func (r GetApiDnsNameserversNsgroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsNameserversNsgroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDnsNameserversNsgroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameserverGroup
}

// Status returns HTTPResponse.Status
func (r PutApiDnsNameserversNsgroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDnsNameserversNsgroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiDnsSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDnsSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSettings
}

// Status returns HTTPResponse.Status
func (r PutApiDnsSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDnsSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r GetApiEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r GetApiGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PostApiGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GetApiGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PutApiGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLocationsCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetApiLocationsCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLocationsCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLocationsCountriesCountryCitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *City
}

// Status returns HTTPResponse.Status
func (r GetApiLocationsCountriesCountryCitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLocationsCountriesCountryCitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PeerBatch
}

// Status returns HTTPResponse.Status
func (r GetApiPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPeersPeerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPeersPeerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPeersPeerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPeersPeerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Peer
}

// Status returns HTTPResponse.Status
func (r GetApiPeersPeerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPeersPeerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPeersPeerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Peer
}

// Status returns HTTPResponse.Status
func (r PutApiPeersPeerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPeersPeerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Policy
}

// Status returns HTTPResponse.Status
func (r GetApiPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r PostApiPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetApiPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r PutApiPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPostureChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PostureCheck
}

// Status returns HTTPResponse.Status
func (r GetApiPostureChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPostureChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPostureChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostureCheck
}

// Status returns HTTPResponse.Status
func (r PostApiPostureChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPostureChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPostureChecksPostureCheckIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPostureChecksPostureCheckIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPostureChecksPostureCheckIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPostureChecksPostureCheckIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostureCheck
}

// Status returns HTTPResponse.Status
func (r GetApiPostureChecksPostureCheckIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPostureChecksPostureCheckIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPostureChecksPostureCheckIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostureCheck
}

// Status returns HTTPResponse.Status
func (r PutApiPostureChecksPostureCheckIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPostureChecksPostureCheckIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Route
}

// Status returns HTTPResponse.Status
func (r GetApiRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
}

// Status returns HTTPResponse.Status
func (r PostApiRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRoutesRouteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRoutesRouteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRoutesRouteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoutesRouteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
}

// Status returns HTTPResponse.Status
func (r GetApiRoutesRouteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoutesRouteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRoutesRouteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
}

// Status returns HTTPResponse.Status
func (r PutApiRoutesRouteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRoutesRouteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSetupKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SetupKey
}

// Status returns HTTPResponse.Status
func (r GetApiSetupKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSetupKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSetupKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupKey
}

// Status returns HTTPResponse.Status
func (r PostApiSetupKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSetupKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSetupKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupKey
}

// Status returns HTTPResponse.Status
func (r GetApiSetupKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSetupKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiSetupKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupKey
}

// Status returns HTTPResponse.Status
func (r PutApiSetupKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiSetupKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutApiUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersUserIdInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiUsersUserIdInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersUserIdInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersUserIdTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonalAccessToken
}

// Status returns HTTPResponse.Status
func (r GetApiUsersUserIdTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersUserIdTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersUserIdTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonalAccessTokenGenerated
}

// Status returns HTTPResponse.Status
func (r PostApiUsersUserIdTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersUserIdTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiUsersUserIdTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiUsersUserIdTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiUsersUserIdTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersUserIdTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonalAccessToken
}

// Status returns HTTPResponse.Status
func (r GetApiUsersUserIdTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersUserIdTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiAccountsWithResponse request returning *GetApiAccountsResponse
func (c *ClientWithResponses) GetApiAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAccountsResponse, error) {
	rsp, err := c.GetApiAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsResponse(rsp)
}

// DeleteApiAccountsAccountIdWithResponse request returning *DeleteApiAccountsAccountIdResponse
func (c *ClientWithResponses) DeleteApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteApiAccountsAccountIdResponse, error) {
	rsp, err := c.DeleteApiAccountsAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiAccountsAccountIdResponse(rsp)
}

// PutApiAccountsAccountIdWithBodyWithResponse request with arbitrary body returning *PutApiAccountsAccountIdResponse
func (c *ClientWithResponses) PutApiAccountsAccountIdWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error) {
	rsp, err := c.PutApiAccountsAccountIdWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAccountsAccountIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error) {
	rsp, err := c.PutApiAccountsAccountId(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAccountsAccountIdResponse(rsp)
}

// GetApiDnsNameserversWithResponse request returning *GetApiDnsNameserversResponse
func (c *ClientWithResponses) GetApiDnsNameserversWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversResponse, error) {
	rsp, err := c.GetApiDnsNameservers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsNameserversResponse(rsp)
}

// PostApiDnsNameserversWithBodyWithResponse request with arbitrary body returning *PostApiDnsNameserversResponse
func (c *ClientWithResponses) PostApiDnsNameserversWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error) {
	rsp, err := c.PostApiDnsNameserversWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsNameserversResponse(rsp)
}

func (c *ClientWithResponses) PostApiDnsNameserversWithResponse(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error) {
	rsp, err := c.PostApiDnsNameservers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsNameserversResponse(rsp)
}

// DeleteApiDnsNameserversNsgroupIdWithResponse request returning *DeleteApiDnsNameserversNsgroupIdResponse
func (c *ClientWithResponses) DeleteApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*DeleteApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.DeleteApiDnsNameserversNsgroupId(ctx, nsgroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsNameserversNsgroupIdResponse(rsp)
}

// GetApiDnsNameserversNsgroupIdWithResponse request returning *GetApiDnsNameserversNsgroupIdResponse
func (c *ClientWithResponses) GetApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.GetApiDnsNameserversNsgroupId(ctx, nsgroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsNameserversNsgroupIdResponse(rsp)
}

// PutApiDnsNameserversNsgroupIdWithBodyWithResponse request with arbitrary body returning *PutApiDnsNameserversNsgroupIdResponse
func (c *ClientWithResponses) PutApiDnsNameserversNsgroupIdWithBodyWithResponse(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.PutApiDnsNameserversNsgroupIdWithBody(ctx, nsgroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsNameserversNsgroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.PutApiDnsNameserversNsgroupId(ctx, nsgroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsNameserversNsgroupIdResponse(rsp)
}

// GetApiDnsSettingsWithResponse request returning *GetApiDnsSettingsResponse
func (c *ClientWithResponses) GetApiDnsSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsSettingsResponse, error) {
	rsp, err := c.GetApiDnsSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsSettingsResponse(rsp)
}

// PutApiDnsSettingsWithBodyWithResponse request with arbitrary body returning *PutApiDnsSettingsResponse
func (c *ClientWithResponses) PutApiDnsSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error) {
	rsp, err := c.PutApiDnsSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutApiDnsSettingsWithResponse(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error) {
	rsp, err := c.PutApiDnsSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsSettingsResponse(rsp)
}

// GetApiEventsWithResponse request returning *GetApiEventsResponse
func (c *ClientWithResponses) GetApiEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiEventsResponse, error) {
	rsp, err := c.GetApiEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiEventsResponse(rsp)
}

// GetApiGroupsWithResponse request returning *GetApiGroupsResponse
func (c *ClientWithResponses) GetApiGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGroupsResponse, error) {
	rsp, err := c.GetApiGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGroupsResponse(rsp)
}

// PostApiGroupsWithBodyWithResponse request with arbitrary body returning *PostApiGroupsResponse
func (c *ClientWithResponses) PostApiGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error) {
	rsp, err := c.PostApiGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostApiGroupsWithResponse(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error) {
	rsp, err := c.PostApiGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGroupsResponse(rsp)
}

// DeleteApiGroupsGroupIdWithResponse request returning *DeleteApiGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*DeleteApiGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteApiGroupsGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiGroupsGroupIdResponse(rsp)
}

// GetApiGroupsGroupIdWithResponse request returning *GetApiGroupsGroupIdResponse
func (c *ClientWithResponses) GetApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetApiGroupsGroupIdResponse, error) {
	rsp, err := c.GetApiGroupsGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGroupsGroupIdResponse(rsp)
}

// PutApiGroupsGroupIdWithBodyWithResponse request with arbitrary body returning *PutApiGroupsGroupIdResponse
func (c *ClientWithResponses) PutApiGroupsGroupIdWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error) {
	rsp, err := c.PutApiGroupsGroupIdWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiGroupsGroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error) {
	rsp, err := c.PutApiGroupsGroupId(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiGroupsGroupIdResponse(rsp)
}

// GetApiLocationsCountriesWithResponse request returning *GetApiLocationsCountriesResponse
func (c *ClientWithResponses) GetApiLocationsCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesResponse, error) {
	rsp, err := c.GetApiLocationsCountries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLocationsCountriesResponse(rsp)
}

// GetApiLocationsCountriesCountryCitiesWithResponse request returning *GetApiLocationsCountriesCountryCitiesResponse
func (c *ClientWithResponses) GetApiLocationsCountriesCountryCitiesWithResponse(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesCountryCitiesResponse, error) {
	rsp, err := c.GetApiLocationsCountriesCountryCities(ctx, country, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLocationsCountriesCountryCitiesResponse(rsp)
}

// GetApiPeersWithResponse request returning *GetApiPeersResponse
func (c *ClientWithResponses) GetApiPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPeersResponse, error) {
	rsp, err := c.GetApiPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPeersResponse(rsp)
}

// DeleteApiPeersPeerIdWithResponse request returning *DeleteApiPeersPeerIdResponse
func (c *ClientWithResponses) DeleteApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*DeleteApiPeersPeerIdResponse, error) {
	rsp, err := c.DeleteApiPeersPeerId(ctx, peerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPeersPeerIdResponse(rsp)
}

// GetApiPeersPeerIdWithResponse request returning *GetApiPeersPeerIdResponse
func (c *ClientWithResponses) GetApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*GetApiPeersPeerIdResponse, error) {
	rsp, err := c.GetApiPeersPeerId(ctx, peerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPeersPeerIdResponse(rsp)
}

// PutApiPeersPeerIdWithBodyWithResponse request with arbitrary body returning *PutApiPeersPeerIdResponse
func (c *ClientWithResponses) PutApiPeersPeerIdWithBodyWithResponse(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error) {
	rsp, err := c.PutApiPeersPeerIdWithBody(ctx, peerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPeersPeerIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPeersPeerIdWithResponse(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error) {
	rsp, err := c.PutApiPeersPeerId(ctx, peerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPeersPeerIdResponse(rsp)
}

// GetApiPoliciesWithResponse request returning *GetApiPoliciesResponse
func (c *ClientWithResponses) GetApiPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPoliciesResponse, error) {
	rsp, err := c.GetApiPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoliciesResponse(rsp)
}

// PostApiPoliciesWithBodyWithResponse request with arbitrary body returning *PostApiPoliciesResponse
func (c *ClientWithResponses) PostApiPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error) {
	rsp, err := c.PostApiPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PostApiPoliciesWithResponse(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error) {
	rsp, err := c.PostApiPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPoliciesResponse(rsp)
}

// DeleteApiPoliciesPolicyIdWithResponse request returning *DeleteApiPoliciesPolicyIdResponse
func (c *ClientWithResponses) DeleteApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*DeleteApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.DeleteApiPoliciesPolicyId(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPoliciesPolicyIdResponse(rsp)
}

// GetApiPoliciesPolicyIdWithResponse request returning *GetApiPoliciesPolicyIdResponse
func (c *ClientWithResponses) GetApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.GetApiPoliciesPolicyId(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoliciesPolicyIdResponse(rsp)
}

// PutApiPoliciesPolicyIdWithBodyWithResponse request with arbitrary body returning *PutApiPoliciesPolicyIdResponse
func (c *ClientWithResponses) PutApiPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutApiPoliciesPolicyIdWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPoliciesPolicyIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutApiPoliciesPolicyId(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPoliciesPolicyIdResponse(rsp)
}

// GetApiPostureChecksWithResponse request returning *GetApiPostureChecksResponse
func (c *ClientWithResponses) GetApiPostureChecksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPostureChecksResponse, error) {
	rsp, err := c.GetApiPostureChecks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPostureChecksResponse(rsp)
}

// PostApiPostureChecksWithBodyWithResponse request with arbitrary body returning *PostApiPostureChecksResponse
func (c *ClientWithResponses) PostApiPostureChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error) {
	rsp, err := c.PostApiPostureChecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPostureChecksResponse(rsp)
}

func (c *ClientWithResponses) PostApiPostureChecksWithResponse(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error) {
	rsp, err := c.PostApiPostureChecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPostureChecksResponse(rsp)
}

// DeleteApiPostureChecksPostureCheckIdWithResponse request returning *DeleteApiPostureChecksPostureCheckIdResponse
func (c *ClientWithResponses) DeleteApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*DeleteApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.DeleteApiPostureChecksPostureCheckId(ctx, postureCheckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPostureChecksPostureCheckIdResponse(rsp)
}

// GetApiPostureChecksPostureCheckIdWithResponse request returning *GetApiPostureChecksPostureCheckIdResponse
func (c *ClientWithResponses) GetApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*GetApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.GetApiPostureChecksPostureCheckId(ctx, postureCheckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPostureChecksPostureCheckIdResponse(rsp)
}

// PutApiPostureChecksPostureCheckIdWithBodyWithResponse request with arbitrary body returning *PutApiPostureChecksPostureCheckIdResponse
func (c *ClientWithResponses) PutApiPostureChecksPostureCheckIdWithBodyWithResponse(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.PutApiPostureChecksPostureCheckIdWithBody(ctx, postureCheckId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPostureChecksPostureCheckIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.PutApiPostureChecksPostureCheckId(ctx, postureCheckId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPostureChecksPostureCheckIdResponse(rsp)
}

// GetApiRoutesWithResponse request returning *GetApiRoutesResponse
func (c *ClientWithResponses) GetApiRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRoutesResponse, error) {
	rsp, err := c.GetApiRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoutesResponse(rsp)
}

// PostApiRoutesWithBodyWithResponse request with arbitrary body returning *PostApiRoutesResponse
func (c *ClientWithResponses) PostApiRoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error) {
	rsp, err := c.PostApiRoutesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoutesResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoutesWithResponse(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error) {
	rsp, err := c.PostApiRoutes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoutesResponse(rsp)
}

// DeleteApiRoutesRouteIdWithResponse request returning *DeleteApiRoutesRouteIdResponse
func (c *ClientWithResponses) DeleteApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*DeleteApiRoutesRouteIdResponse, error) {
	rsp, err := c.DeleteApiRoutesRouteId(ctx, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRoutesRouteIdResponse(rsp)
}

// GetApiRoutesRouteIdWithResponse request returning *GetApiRoutesRouteIdResponse
func (c *ClientWithResponses) GetApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*GetApiRoutesRouteIdResponse, error) {
	rsp, err := c.GetApiRoutesRouteId(ctx, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoutesRouteIdResponse(rsp)
}

// PutApiRoutesRouteIdWithBodyWithResponse request with arbitrary body returning *PutApiRoutesRouteIdResponse
func (c *ClientWithResponses) PutApiRoutesRouteIdWithBodyWithResponse(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error) {
	rsp, err := c.PutApiRoutesRouteIdWithBody(ctx, routeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRoutesRouteIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error) {
	rsp, err := c.PutApiRoutesRouteId(ctx, routeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRoutesRouteIdResponse(rsp)
}

// GetApiSetupKeysWithResponse request returning *GetApiSetupKeysResponse
func (c *ClientWithResponses) GetApiSetupKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSetupKeysResponse, error) {
	rsp, err := c.GetApiSetupKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSetupKeysResponse(rsp)
}

// PostApiSetupKeysWithBodyWithResponse request with arbitrary body returning *PostApiSetupKeysResponse
func (c *ClientWithResponses) PostApiSetupKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error) {
	rsp, err := c.PostApiSetupKeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSetupKeysResponse(rsp)
}

func (c *ClientWithResponses) PostApiSetupKeysWithResponse(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error) {
	rsp, err := c.PostApiSetupKeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSetupKeysResponse(rsp)
}

// GetApiSetupKeysKeyIdWithResponse request returning *GetApiSetupKeysKeyIdResponse
func (c *ClientWithResponses) GetApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*GetApiSetupKeysKeyIdResponse, error) {
	rsp, err := c.GetApiSetupKeysKeyId(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSetupKeysKeyIdResponse(rsp)
}

// PutApiSetupKeysKeyIdWithBodyWithResponse request with arbitrary body returning *PutApiSetupKeysKeyIdResponse
func (c *ClientWithResponses) PutApiSetupKeysKeyIdWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error) {
	rsp, err := c.PutApiSetupKeysKeyIdWithBody(ctx, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSetupKeysKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error) {
	rsp, err := c.PutApiSetupKeysKeyId(ctx, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSetupKeysKeyIdResponse(rsp)
}

// GetApiUsersWithResponse request returning *GetApiUsersResponse
func (c *ClientWithResponses) GetApiUsersWithResponse(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*GetApiUsersResponse, error) {
	rsp, err := c.GetApiUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersResponse(rsp)
}

// PostApiUsersWithBodyWithResponse request with arbitrary body returning *PostApiUsersResponse
func (c *ClientWithResponses) PostApiUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error) {
	rsp, err := c.PostApiUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersResponse(rsp)
}

func (c *ClientWithResponses) PostApiUsersWithResponse(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error) {
	rsp, err := c.PostApiUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersResponse(rsp)
}

// DeleteApiUsersUserIdWithResponse request returning *DeleteApiUsersUserIdResponse
func (c *ClientWithResponses) DeleteApiUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdResponse, error) {
	rsp, err := c.DeleteApiUsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiUsersUserIdResponse(rsp)
}

// PutApiUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutApiUsersUserIdResponse
func (c *ClientWithResponses) PutApiUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error) {
	rsp, err := c.PutApiUsersUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiUsersUserIdWithResponse(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error) {
	rsp, err := c.PutApiUsersUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUsersUserIdResponse(rsp)
}

// PostApiUsersUserIdInviteWithResponse request returning *PostApiUsersUserIdInviteResponse
func (c *ClientWithResponses) PostApiUsersUserIdInviteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdInviteResponse, error) {
	rsp, err := c.PostApiUsersUserIdInvite(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersUserIdInviteResponse(rsp)
}

// GetApiUsersUserIdTokensWithResponse request returning *GetApiUsersUserIdTokensResponse
func (c *ClientWithResponses) GetApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensResponse, error) {
	rsp, err := c.GetApiUsersUserIdTokens(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersUserIdTokensResponse(rsp)
}

// PostApiUsersUserIdTokensWithBodyWithResponse request with arbitrary body returning *PostApiUsersUserIdTokensResponse
func (c *ClientWithResponses) PostApiUsersUserIdTokensWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error) {
	rsp, err := c.PostApiUsersUserIdTokensWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersUserIdTokensResponse(rsp)
}

func (c *ClientWithResponses) PostApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error) {
	rsp, err := c.PostApiUsersUserIdTokens(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersUserIdTokensResponse(rsp)
}

// DeleteApiUsersUserIdTokensTokenIdWithResponse request returning *DeleteApiUsersUserIdTokensTokenIdResponse
func (c *ClientWithResponses) DeleteApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdTokensTokenIdResponse, error) {
	rsp, err := c.DeleteApiUsersUserIdTokensTokenId(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiUsersUserIdTokensTokenIdResponse(rsp)
}

// GetApiUsersUserIdTokensTokenIdWithResponse request returning *GetApiUsersUserIdTokensTokenIdResponse
func (c *ClientWithResponses) GetApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensTokenIdResponse, error) {
	rsp, err := c.GetApiUsersUserIdTokensTokenId(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersUserIdTokensTokenIdResponse(rsp)
}

// ParseGetApiAccountsResponse parses an HTTP response from a GetApiAccountsWithResponse call
func ParseGetApiAccountsResponse(rsp *http.Response) (*GetApiAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiAccountsAccountIdResponse parses an HTTP response from a DeleteApiAccountsAccountIdWithResponse call
func ParseDeleteApiAccountsAccountIdResponse(rsp *http.Response) (*DeleteApiAccountsAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiAccountsAccountIdResponse parses an HTTP response from a PutApiAccountsAccountIdWithResponse call
func ParsePutApiAccountsAccountIdResponse(rsp *http.Response) (*PutApiAccountsAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiDnsNameserversResponse parses an HTTP response from a GetApiDnsNameserversWithResponse call
func ParseGetApiDnsNameserversResponse(rsp *http.Response) (*GetApiDnsNameserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiDnsNameserversResponse parses an HTTP response from a PostApiDnsNameserversWithResponse call
func ParsePostApiDnsNameserversResponse(rsp *http.Response) (*PostApiDnsNameserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiDnsNameserversNsgroupIdResponse parses an HTTP response from a DeleteApiDnsNameserversNsgroupIdWithResponse call
func ParseDeleteApiDnsNameserversNsgroupIdResponse(rsp *http.Response) (*DeleteApiDnsNameserversNsgroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsNameserversNsgroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiDnsNameserversNsgroupIdResponse parses an HTTP response from a GetApiDnsNameserversNsgroupIdWithResponse call
func ParseGetApiDnsNameserversNsgroupIdResponse(rsp *http.Response) (*GetApiDnsNameserversNsgroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsNameserversNsgroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiDnsNameserversNsgroupIdResponse parses an HTTP response from a PutApiDnsNameserversNsgroupIdWithResponse call
func ParsePutApiDnsNameserversNsgroupIdResponse(rsp *http.Response) (*PutApiDnsNameserversNsgroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDnsNameserversNsgroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiDnsSettingsResponse parses an HTTP response from a GetApiDnsSettingsWithResponse call
func ParseGetApiDnsSettingsResponse(rsp *http.Response) (*GetApiDnsSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiDnsSettingsResponse parses an HTTP response from a PutApiDnsSettingsWithResponse call
func ParsePutApiDnsSettingsResponse(rsp *http.Response) (*PutApiDnsSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDnsSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiEventsResponse parses an HTTP response from a GetApiEventsWithResponse call
func ParseGetApiEventsResponse(rsp *http.Response) (*GetApiEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiGroupsResponse parses an HTTP response from a GetApiGroupsWithResponse call
func ParseGetApiGroupsResponse(rsp *http.Response) (*GetApiGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiGroupsResponse parses an HTTP response from a PostApiGroupsWithResponse call
func ParsePostApiGroupsResponse(rsp *http.Response) (*PostApiGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiGroupsGroupIdResponse parses an HTTP response from a DeleteApiGroupsGroupIdWithResponse call
func ParseDeleteApiGroupsGroupIdResponse(rsp *http.Response) (*DeleteApiGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiGroupsGroupIdResponse parses an HTTP response from a GetApiGroupsGroupIdWithResponse call
func ParseGetApiGroupsGroupIdResponse(rsp *http.Response) (*GetApiGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiGroupsGroupIdResponse parses an HTTP response from a PutApiGroupsGroupIdWithResponse call
func ParsePutApiGroupsGroupIdResponse(rsp *http.Response) (*PutApiGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiLocationsCountriesResponse parses an HTTP response from a GetApiLocationsCountriesWithResponse call
func ParseGetApiLocationsCountriesResponse(rsp *http.Response) (*GetApiLocationsCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLocationsCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiLocationsCountriesCountryCitiesResponse parses an HTTP response from a GetApiLocationsCountriesCountryCitiesWithResponse call
func ParseGetApiLocationsCountriesCountryCitiesResponse(rsp *http.Response) (*GetApiLocationsCountriesCountryCitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLocationsCountriesCountryCitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest City
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPeersResponse parses an HTTP response from a GetApiPeersWithResponse call
func ParseGetApiPeersResponse(rsp *http.Response) (*GetApiPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PeerBatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiPeersPeerIdResponse parses an HTTP response from a DeleteApiPeersPeerIdWithResponse call
func ParseDeleteApiPeersPeerIdResponse(rsp *http.Response) (*DeleteApiPeersPeerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPeersPeerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPeersPeerIdResponse parses an HTTP response from a GetApiPeersPeerIdWithResponse call
func ParseGetApiPeersPeerIdResponse(rsp *http.Response) (*GetApiPeersPeerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPeersPeerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPeersPeerIdResponse parses an HTTP response from a PutApiPeersPeerIdWithResponse call
func ParsePutApiPeersPeerIdResponse(rsp *http.Response) (*PutApiPeersPeerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPeersPeerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPoliciesResponse parses an HTTP response from a GetApiPoliciesWithResponse call
func ParseGetApiPoliciesResponse(rsp *http.Response) (*GetApiPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPoliciesResponse parses an HTTP response from a PostApiPoliciesWithResponse call
func ParsePostApiPoliciesResponse(rsp *http.Response) (*PostApiPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiPoliciesPolicyIdResponse parses an HTTP response from a DeleteApiPoliciesPolicyIdWithResponse call
func ParseDeleteApiPoliciesPolicyIdResponse(rsp *http.Response) (*DeleteApiPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPoliciesPolicyIdResponse parses an HTTP response from a GetApiPoliciesPolicyIdWithResponse call
func ParseGetApiPoliciesPolicyIdResponse(rsp *http.Response) (*GetApiPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPoliciesPolicyIdResponse parses an HTTP response from a PutApiPoliciesPolicyIdWithResponse call
func ParsePutApiPoliciesPolicyIdResponse(rsp *http.Response) (*PutApiPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPostureChecksResponse parses an HTTP response from a GetApiPostureChecksWithResponse call
func ParseGetApiPostureChecksResponse(rsp *http.Response) (*GetApiPostureChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPostureChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPostureChecksResponse parses an HTTP response from a PostApiPostureChecksWithResponse call
func ParsePostApiPostureChecksResponse(rsp *http.Response) (*PostApiPostureChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPostureChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiPostureChecksPostureCheckIdResponse parses an HTTP response from a DeleteApiPostureChecksPostureCheckIdWithResponse call
func ParseDeleteApiPostureChecksPostureCheckIdResponse(rsp *http.Response) (*DeleteApiPostureChecksPostureCheckIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPostureChecksPostureCheckIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPostureChecksPostureCheckIdResponse parses an HTTP response from a GetApiPostureChecksPostureCheckIdWithResponse call
func ParseGetApiPostureChecksPostureCheckIdResponse(rsp *http.Response) (*GetApiPostureChecksPostureCheckIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPostureChecksPostureCheckIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPostureChecksPostureCheckIdResponse parses an HTTP response from a PutApiPostureChecksPostureCheckIdWithResponse call
func ParsePutApiPostureChecksPostureCheckIdResponse(rsp *http.Response) (*PutApiPostureChecksPostureCheckIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPostureChecksPostureCheckIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiRoutesResponse parses an HTTP response from a GetApiRoutesWithResponse call
func ParseGetApiRoutesResponse(rsp *http.Response) (*GetApiRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiRoutesResponse parses an HTTP response from a PostApiRoutesWithResponse call
func ParsePostApiRoutesResponse(rsp *http.Response) (*PostApiRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiRoutesRouteIdResponse parses an HTTP response from a DeleteApiRoutesRouteIdWithResponse call
func ParseDeleteApiRoutesRouteIdResponse(rsp *http.Response) (*DeleteApiRoutesRouteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRoutesRouteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRoutesRouteIdResponse parses an HTTP response from a GetApiRoutesRouteIdWithResponse call
func ParseGetApiRoutesRouteIdResponse(rsp *http.Response) (*GetApiRoutesRouteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoutesRouteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiRoutesRouteIdResponse parses an HTTP response from a PutApiRoutesRouteIdWithResponse call
func ParsePutApiRoutesRouteIdResponse(rsp *http.Response) (*PutApiRoutesRouteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRoutesRouteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSetupKeysResponse parses an HTTP response from a GetApiSetupKeysWithResponse call
func ParseGetApiSetupKeysResponse(rsp *http.Response) (*GetApiSetupKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSetupKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiSetupKeysResponse parses an HTTP response from a PostApiSetupKeysWithResponse call
func ParsePostApiSetupKeysResponse(rsp *http.Response) (*PostApiSetupKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSetupKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSetupKeysKeyIdResponse parses an HTTP response from a GetApiSetupKeysKeyIdWithResponse call
func ParseGetApiSetupKeysKeyIdResponse(rsp *http.Response) (*GetApiSetupKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSetupKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiSetupKeysKeyIdResponse parses an HTTP response from a PutApiSetupKeysKeyIdWithResponse call
func ParsePutApiSetupKeysKeyIdResponse(rsp *http.Response) (*PutApiSetupKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiSetupKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiUsersResponse parses an HTTP response from a GetApiUsersWithResponse call
func ParseGetApiUsersResponse(rsp *http.Response) (*GetApiUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUsersResponse parses an HTTP response from a PostApiUsersWithResponse call
func ParsePostApiUsersResponse(rsp *http.Response) (*PostApiUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiUsersUserIdResponse parses an HTTP response from a DeleteApiUsersUserIdWithResponse call
func ParseDeleteApiUsersUserIdResponse(rsp *http.Response) (*DeleteApiUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiUsersUserIdResponse parses an HTTP response from a PutApiUsersUserIdWithResponse call
func ParsePutApiUsersUserIdResponse(rsp *http.Response) (*PutApiUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUsersUserIdInviteResponse parses an HTTP response from a PostApiUsersUserIdInviteWithResponse call
func ParsePostApiUsersUserIdInviteResponse(rsp *http.Response) (*PostApiUsersUserIdInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersUserIdInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiUsersUserIdTokensResponse parses an HTTP response from a GetApiUsersUserIdTokensWithResponse call
func ParseGetApiUsersUserIdTokensResponse(rsp *http.Response) (*GetApiUsersUserIdTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersUserIdTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonalAccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUsersUserIdTokensResponse parses an HTTP response from a PostApiUsersUserIdTokensWithResponse call
func ParsePostApiUsersUserIdTokensResponse(rsp *http.Response) (*PostApiUsersUserIdTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersUserIdTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonalAccessTokenGenerated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiUsersUserIdTokensTokenIdResponse parses an HTTP response from a DeleteApiUsersUserIdTokensTokenIdWithResponse call
func ParseDeleteApiUsersUserIdTokensTokenIdResponse(rsp *http.Response) (*DeleteApiUsersUserIdTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiUsersUserIdTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiUsersUserIdTokensTokenIdResponse parses an HTTP response from a GetApiUsersUserIdTokensTokenIdWithResponse call
func ParseGetApiUsersUserIdTokensTokenIdResponse(rsp *http.Response) (*GetApiUsersUserIdTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersUserIdTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonalAccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7/7b/f8EAAD///JtB43//gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
