// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	TokenAuthScopes  = "TokenAuth.Scopes"
)

// Defines values for EventActivityCode.
const (
	EventActivityCodeAccountCreate                            EventActivityCode = "account.create"
	EventActivityCodeAccountSettingPeerLoginExpirationDisable EventActivityCode = "account.setting.peer.login.expiration.disable"
	EventActivityCodeAccountSettingPeerLoginExpirationEnable  EventActivityCode = "account.setting.peer.login.expiration.enable"
	EventActivityCodeAccountSettingPeerLoginExpirationUpdate  EventActivityCode = "account.setting.peer.login.expiration.update"
	EventActivityCodeDnsSettingDisabledManagementGroupAdd     EventActivityCode = "dns.setting.disabled.management.group.add"
	EventActivityCodeDnsSettingDisabledManagementGroupDelete  EventActivityCode = "dns.setting.disabled.management.group.delete"
	EventActivityCodeGroupAdd                                 EventActivityCode = "group.add"
	EventActivityCodeGroupUpdate                              EventActivityCode = "group.update"
	EventActivityCodeNameserverGroupAdd                       EventActivityCode = "nameserver.group.add"
	EventActivityCodeNameserverGroupDelete                    EventActivityCode = "nameserver.group.delete"
	EventActivityCodeNameserverGroupUpdate                    EventActivityCode = "nameserver.group.update"
	EventActivityCodePeerLoginExpirationDisable               EventActivityCode = "peer.login.expiration.disable"
	EventActivityCodePeerLoginExpirationEnable                EventActivityCode = "peer.login.expiration.enable"
	EventActivityCodePeerLoginExpire                          EventActivityCode = "peer.login.expire"
	EventActivityCodePeerRename                               EventActivityCode = "peer.rename"
	EventActivityCodePeerSshDisable                           EventActivityCode = "peer.ssh.disable"
	EventActivityCodePeerSshEnable                            EventActivityCode = "peer.ssh.enable"
	EventActivityCodePersonalAccessTokenCreate                EventActivityCode = "personal.access.token.create"
	EventActivityCodePersonalAccessTokenDelete                EventActivityCode = "personal.access.token.delete"
	EventActivityCodePolicyAdd                                EventActivityCode = "policy.add"
	EventActivityCodePolicyDelete                             EventActivityCode = "policy.delete"
	EventActivityCodePolicyUpdate                             EventActivityCode = "policy.update"
	EventActivityCodeRouteAdd                                 EventActivityCode = "route.add"
	EventActivityCodeRouteDelete                              EventActivityCode = "route.delete"
	EventActivityCodeRouteUpdate                              EventActivityCode = "route.update"
	EventActivityCodeRuleAdd                                  EventActivityCode = "rule.add"
	EventActivityCodeRuleDelete                               EventActivityCode = "rule.delete"
	EventActivityCodeRuleUpdate                               EventActivityCode = "rule.update"
	EventActivityCodeServiceUserCreate                        EventActivityCode = "service.user.create"
	EventActivityCodeServiceUserDelete                        EventActivityCode = "service.user.delete"
	EventActivityCodeSetupkeyAdd                              EventActivityCode = "setupkey.add"
	EventActivityCodeSetupkeyGroupAdd                         EventActivityCode = "setupkey.group.add"
	EventActivityCodeSetupkeyGroupDelete                      EventActivityCode = "setupkey.group.delete"
	EventActivityCodeSetupkeyOveruse                          EventActivityCode = "setupkey.overuse"
	EventActivityCodeSetupkeyPeerAdd                          EventActivityCode = "setupkey.peer.add"
	EventActivityCodeSetupkeyRevoke                           EventActivityCode = "setupkey.revoke"
	EventActivityCodeSetupkeyUpdate                           EventActivityCode = "setupkey.update"
	EventActivityCodeUserBlock                                EventActivityCode = "user.block"
	EventActivityCodeUserGroupAdd                             EventActivityCode = "user.group.add"
	EventActivityCodeUserGroupDelete                          EventActivityCode = "user.group.delete"
	EventActivityCodeUserInvite                               EventActivityCode = "user.invite"
	EventActivityCodeUserJoin                                 EventActivityCode = "user.join"
	EventActivityCodeUserPeerAdd                              EventActivityCode = "user.peer.add"
	EventActivityCodeUserPeerDelete                           EventActivityCode = "user.peer.delete"
	EventActivityCodeUserPeerLogin                            EventActivityCode = "user.peer.login"
	EventActivityCodeUserRoleUpdate                           EventActivityCode = "user.role.update"
	EventActivityCodeUserUnblock                              EventActivityCode = "user.unblock"
)

// Defines values for GeoLocationCheckAction.
const (
	GeoLocationCheckActionAllow GeoLocationCheckAction = "allow"
	GeoLocationCheckActionDeny  GeoLocationCheckAction = "deny"
)

// Defines values for GroupIssued.
const (
	GroupIssuedApi         GroupIssued = "api"
	GroupIssuedIntegration GroupIssued = "integration"
	GroupIssuedJwt         GroupIssued = "jwt"
)

// Defines values for GroupMinimumIssued.
const (
	GroupMinimumIssuedApi         GroupMinimumIssued = "api"
	GroupMinimumIssuedIntegration GroupMinimumIssued = "integration"
	GroupMinimumIssuedJwt         GroupMinimumIssued = "jwt"
)

// Defines values for NameserverNsType.
const (
	NameserverNsTypeUdp NameserverNsType = "udp"
)

// Defines values for PeerNetworkRangeCheckAction.
const (
	PeerNetworkRangeCheckActionAllow PeerNetworkRangeCheckAction = "allow"
	PeerNetworkRangeCheckActionDeny  PeerNetworkRangeCheckAction = "deny"
)

// Defines values for PolicyRuleAction.
const (
	PolicyRuleActionAccept PolicyRuleAction = "accept"
	PolicyRuleActionDrop   PolicyRuleAction = "drop"
)

// Defines values for PolicyRuleProtocol.
const (
	PolicyRuleProtocolAll  PolicyRuleProtocol = "all"
	PolicyRuleProtocolIcmp PolicyRuleProtocol = "icmp"
	PolicyRuleProtocolTcp  PolicyRuleProtocol = "tcp"
	PolicyRuleProtocolUdp  PolicyRuleProtocol = "udp"
)

// Defines values for PolicyRuleMinimumAction.
const (
	PolicyRuleMinimumActionAccept PolicyRuleMinimumAction = "accept"
	PolicyRuleMinimumActionDrop   PolicyRuleMinimumAction = "drop"
)

// Defines values for PolicyRuleMinimumProtocol.
const (
	PolicyRuleMinimumProtocolAll  PolicyRuleMinimumProtocol = "all"
	PolicyRuleMinimumProtocolIcmp PolicyRuleMinimumProtocol = "icmp"
	PolicyRuleMinimumProtocolTcp  PolicyRuleMinimumProtocol = "tcp"
	PolicyRuleMinimumProtocolUdp  PolicyRuleMinimumProtocol = "udp"
)

// Defines values for PolicyRuleUpdateAction.
const (
	Accept PolicyRuleUpdateAction = "accept"
	Drop   PolicyRuleUpdateAction = "drop"
)

// Defines values for PolicyRuleUpdateProtocol.
const (
	PolicyRuleUpdateProtocolAll  PolicyRuleUpdateProtocol = "all"
	PolicyRuleUpdateProtocolIcmp PolicyRuleUpdateProtocol = "icmp"
	PolicyRuleUpdateProtocolTcp  PolicyRuleUpdateProtocol = "tcp"
	PolicyRuleUpdateProtocolUdp  PolicyRuleUpdateProtocol = "udp"
)

// Defines values for UserStatus.
const (
	UserStatusActive  UserStatus = "active"
	UserStatusBlocked UserStatus = "blocked"
	UserStatusInvited UserStatus = "invited"
)

// Defines values for UserPermissionsDashboardView.
const (
	UserPermissionsDashboardViewBlocked UserPermissionsDashboardView = "blocked"
	UserPermissionsDashboardViewFull    UserPermissionsDashboardView = "full"
	UserPermissionsDashboardViewLimited UserPermissionsDashboardView = "limited"
)

// AccessiblePeer defines model for AccessiblePeer.
type AccessiblePeer struct {
	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// Name Peer's hostname
	Name string `json:"name"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`
}

// Account defines model for Account.
type Account struct {
	// Id Account ID
	Id       string          `json:"id"`
	Settings AccountSettings `json:"settings"`
}

// AccountExtraSettings defines model for AccountExtraSettings.
type AccountExtraSettings struct {
	// PeerApprovalEnabled (Cloud only) Enables or disables peer approval globally. If enabled, all peers added will be in pending state until approved by an admin.
	PeerApprovalEnabled *bool `json:"peer_approval_enabled,omitempty"`
}

// AccountRequest defines model for AccountRequest.
type AccountRequest struct {
	Settings AccountSettings `json:"settings"`
}

// AccountSettings defines model for AccountSettings.
type AccountSettings struct {
	Extra *AccountExtraSettings `json:"extra,omitempty"`

	// GroupsPropagationEnabled Allows propagate the new user auto groups to peers that belongs to the user
	GroupsPropagationEnabled *bool `json:"groups_propagation_enabled,omitempty"`

	// JwtAllowGroups List of groups to which users are allowed access
	JwtAllowGroups *[]string `json:"jwt_allow_groups,omitempty"`

	// JwtGroupsClaimName Name of the claim from which we extract groups names to add it to account groups.
	JwtGroupsClaimName *string `json:"jwt_groups_claim_name,omitempty"`

	// JwtGroupsEnabled Allows extract groups from JWT claim and add it to account groups.
	JwtGroupsEnabled *bool `json:"jwt_groups_enabled,omitempty"`

	// PeerLoginExpiration Period of time after which peer login expires (seconds).
	PeerLoginExpiration int `json:"peer_login_expiration"`

	// PeerLoginExpirationEnabled Enables or disables peer login expiration globally. After peer's login has expired the user has to log in (authenticate). Applies only to peers that were added by a user (interactive SSO login).
	PeerLoginExpirationEnabled bool `json:"peer_login_expiration_enabled"`

	// RegularUsersViewBlocked Allows blocking regular users from viewing parts of the system.
	RegularUsersViewBlocked bool `json:"regular_users_view_blocked"`
}

// Checks List of objects that perform the actual checks
type Checks struct {
	// GeoLocationCheck Posture check for geo location
	GeoLocationCheck *GeoLocationCheck `json:"geo_location_check,omitempty"`

	// NbVersionCheck Posture check for the version of operating system
	NbVersionCheck *NBVersionCheck `json:"nb_version_check,omitempty"`

	// OsVersionCheck Posture check for the version of operating system
	OsVersionCheck *OSVersionCheck `json:"os_version_check,omitempty"`

	// PeerNetworkRangeCheck Posture check for allow or deny access based on peer local network addresses
	PeerNetworkRangeCheck *PeerNetworkRangeCheck `json:"peer_network_range_check,omitempty"`

	// ProcessCheck Posture Check for binaries exist and are running in the peer’s system
	ProcessCheck *ProcessCheck `json:"process_check,omitempty"`
}

// City Describe city geographical location information
type City struct {
	// CityName Commonly used English name of the city
	CityName string `json:"city_name"`

	// GeonameId Integer ID of the record in GeoNames database
	GeonameId int `json:"geoname_id"`
}

// CityName Commonly used English name of the city
type CityName = string

// Country Describe country geographical location information
type Country struct {
	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// CountryName Commonly used English name of the country
	CountryName string `json:"country_name"`
}

// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
type CountryCode = string

// CreateSetupKeyRequest defines model for CreateSetupKeyRequest.
type CreateSetupKeyRequest struct {
	// AutoGroups List of group IDs to auto-assign to peers registered with this key
	AutoGroups []string `json:"auto_groups"`

	// Ephemeral Indicate that the peer will be ephemeral or not
	Ephemeral *bool `json:"ephemeral,omitempty"`

	// ExpiresIn Expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// Name Setup Key name
	Name string `json:"name"`

	// Type Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`

	// UsageLimit A number of times this key can be used. The value of 0 indicates the unlimited usage.
	UsageLimit int `json:"usage_limit"`
}

// DNSSettings defines model for DNSSettings.
type DNSSettings struct {
	// DisabledManagementGroups Groups whose DNS management is disabled
	DisabledManagementGroups []string `json:"disabled_management_groups"`
}

// Event defines model for Event.
type Event struct {
	// Activity The activity that occurred during the event
	Activity string `json:"activity"`

	// ActivityCode The string code of the activity that occurred during the event
	ActivityCode EventActivityCode `json:"activity_code"`

	// Id Event unique identifier
	Id string `json:"id"`

	// InitiatorEmail The e-mail address of the initiator of the event. E.g., an e-mail of a user that triggered the event.
	InitiatorEmail string `json:"initiator_email"`

	// InitiatorId The ID of the initiator of the event. E.g., an ID of a user that triggered the event.
	InitiatorId string `json:"initiator_id"`

	// InitiatorName The name of the initiator of the event.
	InitiatorName string `json:"initiator_name"`

	// Meta The metadata of the event
	Meta map[string]string `json:"meta"`

	// TargetId The ID of the target of the event. E.g., an ID of the peer that a user removed.
	TargetId string `json:"target_id"`

	// Timestamp The date and time when the event occurred
	Timestamp time.Time `json:"timestamp"`
}

// EventActivityCode The string code of the activity that occurred during the event
type EventActivityCode string

// GeoLocationCheck Posture check for geo location
type GeoLocationCheck struct {
	// Action Action to take upon policy match
	Action GeoLocationCheckAction `json:"action"`

	// Locations List of geo locations to which the policy applies
	Locations []Location `json:"locations"`
}

// GeoLocationCheckAction Action to take upon policy match
type GeoLocationCheckAction string

// Group defines model for Group.
type Group struct {
	// Id Group ID
	Id string `json:"id"`

	// Issued How the group was issued (api, integration, jwt)
	Issued *GroupIssued `json:"issued,omitempty"`

	// Name Group Name identifier
	Name string `json:"name"`

	// Peers List of peers object
	Peers []PeerMinimum `json:"peers"`

	// PeersCount Count of peers associated to the group
	PeersCount int `json:"peers_count"`
}

// GroupIssued How the group was issued (api, integration, jwt)
type GroupIssued string

// GroupMinimum defines model for GroupMinimum.
type GroupMinimum struct {
	// Id Group ID
	Id string `json:"id"`

	// Issued How the group was issued (api, integration, jwt)
	Issued *GroupMinimumIssued `json:"issued,omitempty"`

	// Name Group Name identifier
	Name string `json:"name"`

	// PeersCount Count of peers associated to the group
	PeersCount int `json:"peers_count"`
}

// GroupMinimumIssued How the group was issued (api, integration, jwt)
type GroupMinimumIssued string

// GroupRequest defines model for GroupRequest.
type GroupRequest struct {
	// Name Group name identifier
	Name string `json:"name"`

	// Peers List of peers ids
	Peers *[]string `json:"peers,omitempty"`
}

// Location Describe geographical location information
type Location struct {
	// CityName Commonly used English name of the city
	CityName *CityName `json:"city_name,omitempty"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`
}

// MinKernelVersionCheck Posture check with the kernel version
type MinKernelVersionCheck struct {
	// MinKernelVersion Minimum acceptable version
	MinKernelVersion string `json:"min_kernel_version"`
}

// MinVersionCheck Posture check for the version of operating system
type MinVersionCheck struct {
	// MinVersion Minimum acceptable version
	MinVersion string `json:"min_version"`
}

// NBVersionCheck Posture check for the version of operating system
type NBVersionCheck = MinVersionCheck

// Nameserver defines model for Nameserver.
type Nameserver struct {
	// Ip Nameserver IP
	Ip string `json:"ip"`

	// NsType Nameserver Type
	NsType NameserverNsType `json:"ns_type"`

	// Port Nameserver Port
	Port int `json:"port"`
}

// NameserverNsType Nameserver Type
type NameserverNsType string

// NameserverGroup defines model for NameserverGroup.
type NameserverGroup struct {
	// Description Description of the nameserver group
	Description string `json:"description"`

	// Domains Match domain list. It should be empty only if primary is true.
	Domains []string `json:"domains"`

	// Enabled Nameserver group status
	Enabled bool `json:"enabled"`

	// Groups Distribution group IDs that defines group of peers that will use this nameserver group
	Groups []string `json:"groups"`

	// Id Nameserver group ID
	Id string `json:"id"`

	// Name Name of nameserver group name
	Name string `json:"name"`

	// Nameservers Nameserver list
	Nameservers []Nameserver `json:"nameservers"`

	// Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
	Primary bool `json:"primary"`

	// SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
	SearchDomainsEnabled bool `json:"search_domains_enabled"`
}

// NameserverGroupRequest defines model for NameserverGroupRequest.
type NameserverGroupRequest struct {
	// Description Description of the nameserver group
	Description string `json:"description"`

	// Domains Match domain list. It should be empty only if primary is true.
	Domains []string `json:"domains"`

	// Enabled Nameserver group status
	Enabled bool `json:"enabled"`

	// Groups Distribution group IDs that defines group of peers that will use this nameserver group
	Groups []string `json:"groups"`

	// Name Name of nameserver group name
	Name string `json:"name"`

	// Nameservers Nameserver list
	Nameservers []Nameserver `json:"nameservers"`

	// Primary Defines if a nameserver group is primary that resolves all domains. It should be true only if domains list is empty.
	Primary bool `json:"primary"`

	// SearchDomainsEnabled Search domain status for match domains. It should be true only if domains list is not empty.
	SearchDomainsEnabled bool `json:"search_domains_enabled"`
}

// OSVersionCheck Posture check for the version of operating system
type OSVersionCheck struct {
	// Android Posture check for the version of operating system
	Android *MinVersionCheck `json:"android,omitempty"`

	// Darwin Posture check for the version of operating system
	Darwin *MinVersionCheck `json:"darwin,omitempty"`

	// Ios Posture check for the version of operating system
	Ios *MinVersionCheck `json:"ios,omitempty"`

	// Linux Posture check with the kernel version
	Linux *MinKernelVersionCheck `json:"linux,omitempty"`

	// Windows Posture check with the kernel version
	Windows *MinKernelVersionCheck `json:"windows,omitempty"`
}

// Peer defines model for Peer.
type Peer struct {
	// AccessiblePeers List of accessible peers
	AccessiblePeers []AccessiblePeer `json:"accessible_peers"`

	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired bool `json:"approval_required"`

	// CityName Commonly used English name of the city
	CityName CityName `json:"city_name"`

	// Connected Peer to Management connection status
	Connected bool `json:"connected"`

	// ConnectionIp Peer's public connection IP address
	ConnectionIp string `json:"connection_ip"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// GeonameId Unique identifier from the GeoNames database for a specific geographical location.
	GeonameId int `json:"geoname_id"`

	// Groups Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Hostname Hostname of the machine
	Hostname string `json:"hostname"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// KernelVersion Peer's operating system kernel version
	KernelVersion string `json:"kernel_version"`

	// LastLogin Last time this peer performed log in (authentication). E.g., user authenticated.
	LastLogin time.Time `json:"last_login"`

	// LastSeen Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// LoginExpirationEnabled Indicates whether peer login expiration has been enabled or not
	LoginExpirationEnabled bool `json:"login_expiration_enabled"`

	// LoginExpired Indicates whether peer's login expired or not
	LoginExpired bool `json:"login_expired"`

	// Name Peer's hostname
	Name string `json:"name"`

	// Os Peer's operating system and version
	Os string `json:"os"`

	// SerialNumber System serial number
	SerialNumber string `json:"serial_number"`

	// SshEnabled Indicates whether SSH server is enabled on this peer
	SshEnabled bool `json:"ssh_enabled"`

	// UiVersion Peer's desktop UI version
	UiVersion string `json:"ui_version"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`

	// Version Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerBase defines model for PeerBase.
type PeerBase struct {
	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired bool `json:"approval_required"`

	// CityName Commonly used English name of the city
	CityName CityName `json:"city_name"`

	// Connected Peer to Management connection status
	Connected bool `json:"connected"`

	// ConnectionIp Peer's public connection IP address
	ConnectionIp string `json:"connection_ip"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// GeonameId Unique identifier from the GeoNames database for a specific geographical location.
	GeonameId int `json:"geoname_id"`

	// Groups Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Hostname Hostname of the machine
	Hostname string `json:"hostname"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// KernelVersion Peer's operating system kernel version
	KernelVersion string `json:"kernel_version"`

	// LastLogin Last time this peer performed log in (authentication). E.g., user authenticated.
	LastLogin time.Time `json:"last_login"`

	// LastSeen Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// LoginExpirationEnabled Indicates whether peer login expiration has been enabled or not
	LoginExpirationEnabled bool `json:"login_expiration_enabled"`

	// LoginExpired Indicates whether peer's login expired or not
	LoginExpired bool `json:"login_expired"`

	// Name Peer's hostname
	Name string `json:"name"`

	// Os Peer's operating system and version
	Os string `json:"os"`

	// SerialNumber System serial number
	SerialNumber string `json:"serial_number"`

	// SshEnabled Indicates whether SSH server is enabled on this peer
	SshEnabled bool `json:"ssh_enabled"`

	// UiVersion Peer's desktop UI version
	UiVersion string `json:"ui_version"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`

	// Version Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerBatch defines model for PeerBatch.
type PeerBatch struct {
	// AccessiblePeersCount Number of accessible peers
	AccessiblePeersCount int `json:"accessible_peers_count"`

	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired bool `json:"approval_required"`

	// CityName Commonly used English name of the city
	CityName CityName `json:"city_name"`

	// Connected Peer to Management connection status
	Connected bool `json:"connected"`

	// ConnectionIp Peer's public connection IP address
	ConnectionIp string `json:"connection_ip"`

	// CountryCode 2-letter ISO 3166-1 alpha-2 code that represents the country
	CountryCode CountryCode `json:"country_code"`

	// DnsLabel Peer's DNS label is the parsed peer name for domain resolution. It is used to form an FQDN by appending the account's domain to the peer label. e.g. peer-dns-label.netbird.cloud
	DnsLabel string `json:"dns_label"`

	// GeonameId Unique identifier from the GeoNames database for a specific geographical location.
	GeonameId int `json:"geoname_id"`

	// Groups Groups that the peer belongs to
	Groups []GroupMinimum `json:"groups"`

	// Hostname Hostname of the machine
	Hostname string `json:"hostname"`

	// Id Peer ID
	Id string `json:"id"`

	// Ip Peer's IP address
	Ip string `json:"ip"`

	// KernelVersion Peer's operating system kernel version
	KernelVersion string `json:"kernel_version"`

	// LastLogin Last time this peer performed log in (authentication). E.g., user authenticated.
	LastLogin time.Time `json:"last_login"`

	// LastSeen Last time peer connected to Netbird's management service
	LastSeen time.Time `json:"last_seen"`

	// LoginExpirationEnabled Indicates whether peer login expiration has been enabled or not
	LoginExpirationEnabled bool `json:"login_expiration_enabled"`

	// LoginExpired Indicates whether peer's login expired or not
	LoginExpired bool `json:"login_expired"`

	// Name Peer's hostname
	Name string `json:"name"`

	// Os Peer's operating system and version
	Os string `json:"os"`

	// SerialNumber System serial number
	SerialNumber string `json:"serial_number"`

	// SshEnabled Indicates whether SSH server is enabled on this peer
	SshEnabled bool `json:"ssh_enabled"`

	// UiVersion Peer's desktop UI version
	UiVersion string `json:"ui_version"`

	// UserId User ID of the user that enrolled this peer
	UserId string `json:"user_id"`

	// Version Peer's daemon or cli version
	Version string `json:"version"`
}

// PeerMinimum defines model for PeerMinimum.
type PeerMinimum struct {
	// Id Peer ID
	Id string `json:"id"`

	// Name Peer's hostname
	Name string `json:"name"`
}

// PeerNetworkRangeCheck Posture check for allow or deny access based on peer local network addresses
type PeerNetworkRangeCheck struct {
	// Action Action to take upon policy match
	Action PeerNetworkRangeCheckAction `json:"action"`

	// Ranges List of peer network ranges in CIDR notation
	Ranges []string `json:"ranges"`
}

// PeerNetworkRangeCheckAction Action to take upon policy match
type PeerNetworkRangeCheckAction string

// PeerRequest defines model for PeerRequest.
type PeerRequest struct {
	// ApprovalRequired (Cloud only) Indicates whether peer needs approval
	ApprovalRequired       *bool  `json:"approval_required,omitempty"`
	LoginExpirationEnabled bool   `json:"login_expiration_enabled"`
	Name                   string `json:"name"`
	SshEnabled             bool   `json:"ssh_enabled"`
}

// PersonalAccessToken defines model for PersonalAccessToken.
type PersonalAccessToken struct {
	// CreatedAt Date the token was created
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy User ID of the user who created the token
	CreatedBy string `json:"created_by"`

	// ExpirationDate Date the token expires
	ExpirationDate time.Time `json:"expiration_date"`

	// Id ID of a token
	Id string `json:"id"`

	// LastUsed Date the token was last used
	LastUsed *time.Time `json:"last_used,omitempty"`

	// Name Name of the token
	Name string `json:"name"`
}

// PersonalAccessTokenGenerated defines model for PersonalAccessTokenGenerated.
type PersonalAccessTokenGenerated struct {
	PersonalAccessToken PersonalAccessToken `json:"personal_access_token"`

	// PlainToken Plain text representation of the generated token
	PlainToken string `json:"plain_token"`
}

// PersonalAccessTokenRequest defines model for PersonalAccessTokenRequest.
type PersonalAccessTokenRequest struct {
	// ExpiresIn Expiration in days
	ExpiresIn int `json:"expires_in"`

	// Name Name of the token
	Name string `json:"name"`
}

// Policy defines model for Policy.
type Policy struct {
	// Description Policy friendly description
	Description string `json:"description"`

	// Enabled Policy status
	Enabled bool `json:"enabled"`

	// Id Policy ID
	Id *string `json:"id,omitempty"`

	// Name Policy name identifier
	Name string `json:"name"`

	// Rules Policy rule object for policy UI editor
	Rules []PolicyRule `json:"rules"`

	// SourcePostureChecks Posture checks ID's applied to policy source groups
	SourcePostureChecks []string `json:"source_posture_checks"`
}

// PolicyMinimum defines model for PolicyMinimum.
type PolicyMinimum struct {
	// Description Policy friendly description
	Description string `json:"description"`

	// Enabled Policy status
	Enabled bool `json:"enabled"`

	// Id Policy ID
	Id *string `json:"id,omitempty"`

	// Name Policy name identifier
	Name string `json:"name"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	// Action Policy rule accept or drops packets
	Action PolicyRuleAction `json:"action"`

	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`

	// Description Policy rule friendly description
	Description *string `json:"description,omitempty"`

	// Destinations Policy rule destination group IDs
	Destinations []GroupMinimum `json:"destinations"`

	// Enabled Policy rule status
	Enabled bool `json:"enabled"`

	// Id Policy rule ID
	Id *string `json:"id,omitempty"`

	// Name Policy rule name identifier
	Name string `json:"name"`

	// Ports Policy rule affected ports or it ranges list
	Ports *[]string `json:"ports,omitempty"`

	// Protocol Policy rule type of the traffic
	Protocol PolicyRuleProtocol `json:"protocol"`

	// Sources Policy rule source group IDs
	Sources []GroupMinimum `json:"sources"`
}

// PolicyRuleAction Policy rule accept or drops packets
type PolicyRuleAction string

// PolicyRuleProtocol Policy rule type of the traffic
type PolicyRuleProtocol string

// PolicyRuleMinimum defines model for PolicyRuleMinimum.
type PolicyRuleMinimum struct {
	// Action Policy rule accept or drops packets
	Action PolicyRuleMinimumAction `json:"action"`

	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`

	// Description Policy rule friendly description
	Description *string `json:"description,omitempty"`

	// Enabled Policy rule status
	Enabled bool `json:"enabled"`

	// Id Policy rule ID
	Id *string `json:"id,omitempty"`

	// Name Policy rule name identifier
	Name string `json:"name"`

	// Ports Policy rule affected ports or it ranges list
	Ports *[]string `json:"ports,omitempty"`

	// Protocol Policy rule type of the traffic
	Protocol PolicyRuleMinimumProtocol `json:"protocol"`
}

// PolicyRuleMinimumAction Policy rule accept or drops packets
type PolicyRuleMinimumAction string

// PolicyRuleMinimumProtocol Policy rule type of the traffic
type PolicyRuleMinimumProtocol string

// PolicyRuleUpdate defines model for PolicyRuleUpdate.
type PolicyRuleUpdate struct {
	// Action Policy rule accept or drops packets
	Action PolicyRuleUpdateAction `json:"action"`

	// Bidirectional Define if the rule is applicable in both directions, sources, and destinations.
	Bidirectional bool `json:"bidirectional"`

	// Description Policy rule friendly description
	Description *string `json:"description,omitempty"`

	// Destinations Policy rule destination group IDs
	Destinations []string `json:"destinations"`

	// Enabled Policy rule status
	Enabled bool `json:"enabled"`

	// Id Policy rule ID
	Id *string `json:"id,omitempty"`

	// Name Policy rule name identifier
	Name string `json:"name"`

	// Ports Policy rule affected ports or it ranges list
	Ports *[]string `json:"ports,omitempty"`

	// Protocol Policy rule type of the traffic
	Protocol PolicyRuleUpdateProtocol `json:"protocol"`

	// Sources Policy rule source group IDs
	Sources []string `json:"sources"`
}

// PolicyRuleUpdateAction Policy rule accept or drops packets
type PolicyRuleUpdateAction string

// PolicyRuleUpdateProtocol Policy rule type of the traffic
type PolicyRuleUpdateProtocol string

// PolicyUpdate defines model for PolicyUpdate.
type PolicyUpdate struct {
	// Description Policy friendly description
	Description string `json:"description"`

	// Enabled Policy status
	Enabled bool `json:"enabled"`

	// Id Policy ID
	Id *string `json:"id,omitempty"`

	// Name Policy name identifier
	Name string `json:"name"`

	// Rules Policy rule object for policy UI editor
	Rules []PolicyRuleUpdate `json:"rules"`

	// SourcePostureChecks Posture checks ID's applied to policy source groups
	SourcePostureChecks *[]string `json:"source_posture_checks,omitempty"`
}

// PostureCheck defines model for PostureCheck.
type PostureCheck struct {
	// Checks List of objects that perform the actual checks
	Checks Checks `json:"checks"`

	// Description Posture check friendly description
	Description *string `json:"description,omitempty"`

	// Id Posture check ID
	Id string `json:"id"`

	// Name Posture check unique name identifier
	Name string `json:"name"`
}

// PostureCheckUpdate defines model for PostureCheckUpdate.
type PostureCheckUpdate struct {
	// Checks List of objects that perform the actual checks
	Checks *Checks `json:"checks,omitempty"`

	// Description Posture check friendly description
	Description string `json:"description"`

	// Name Posture check name identifier
	Name string `json:"name"`
}

// Process Describes the operational activity within a peer's system.
type Process struct {
	// LinuxPath Path to the process executable file in a Linux operating system
	LinuxPath *string `json:"linux_path,omitempty"`

	// MacPath Path to the process executable file in a Mac operating system
	MacPath *string `json:"mac_path,omitempty"`

	// WindowsPath Path to the process executable file in a Windows operating system
	WindowsPath *string `json:"windows_path,omitempty"`
}

// ProcessCheck Posture Check for binaries exist and are running in the peer’s system
type ProcessCheck struct {
	Processes []Process `json:"processes"`
}

// Route defines model for Route.
type Route struct {
	// Description Route description
	Description string `json:"description"`

	// Domains Domain list to be dynamically resolved. Conflicts with network
	Domains *[]string `json:"domains,omitempty"`

	// Enabled Route status
	Enabled bool `json:"enabled"`

	// Groups Group IDs containing routing peers
	Groups []string `json:"groups"`

	// Id Route Id
	Id string `json:"id"`

	// KeepRoute Indicate if the route should be kept after a domain doesn't resolve that IP anymore
	KeepRoute bool `json:"keep_route"`

	// Masquerade Indicate if peer should masquerade traffic to this route's prefix
	Masquerade bool `json:"masquerade"`

	// Metric Route metric number. Lowest number has higher priority
	Metric int `json:"metric"`

	// Network Network range in CIDR format, Conflicts with domains
	Network *string `json:"network,omitempty"`

	// NetworkId Route network identifier, to group HA routes
	NetworkId string `json:"network_id"`

	// NetworkType Network type indicating if it is a domain route or a IPv4/IPv6 route
	NetworkType string `json:"network_type"`

	// Peer Peer Identifier associated with route. This property can not be set together with `peer_groups`
	Peer *string `json:"peer,omitempty"`

	// PeerGroups Peers Group Identifier associated with route. This property can not be set together with `peer`
	PeerGroups *[]string `json:"peer_groups,omitempty"`
}

// RouteRequest defines model for RouteRequest.
type RouteRequest struct {
	// Description Route description
	Description string `json:"description"`

	// Domains Domain list to be dynamically resolved. Conflicts with network
	Domains *[]string `json:"domains,omitempty"`

	// Enabled Route status
	Enabled bool `json:"enabled"`

	// Groups Group IDs containing routing peers
	Groups []string `json:"groups"`

	// KeepRoute Indicate if the route should be kept after a domain doesn't resolve that IP anymore
	KeepRoute bool `json:"keep_route"`

	// Masquerade Indicate if peer should masquerade traffic to this route's prefix
	Masquerade bool `json:"masquerade"`

	// Metric Route metric number. Lowest number has higher priority
	Metric int `json:"metric"`

	// Network Network range in CIDR format, Conflicts with domains
	Network *string `json:"network,omitempty"`

	// NetworkId Route network identifier, to group HA routes
	NetworkId string `json:"network_id"`

	// Peer Peer Identifier associated with route. This property can not be set together with `peer_groups`
	Peer *string `json:"peer,omitempty"`

	// PeerGroups Peers Group Identifier associated with route. This property can not be set together with `peer`
	PeerGroups *[]string `json:"peer_groups,omitempty"`
}

// SetupKey defines model for SetupKey.
type SetupKey struct {
	// AutoGroups List of group IDs to auto-assign to peers registered with this key
	AutoGroups []string `json:"auto_groups"`

	// Ephemeral Indicate that the peer will be ephemeral or not
	Ephemeral bool `json:"ephemeral"`

	// Expires Setup Key expiration date
	Expires time.Time `json:"expires"`

	// Id Setup Key ID
	Id string `json:"id"`

	// Key Setup Key value
	Key string `json:"key"`

	// LastUsed Setup key last usage date
	LastUsed time.Time `json:"last_used"`

	// Name Setup key name identifier
	Name string `json:"name"`

	// Revoked Setup key revocation status
	Revoked bool `json:"revoked"`

	// State Setup key status, "valid", "overused","expired" or "revoked"
	State string `json:"state"`

	// Type Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`

	// UpdatedAt Setup key last update date
	UpdatedAt time.Time `json:"updated_at"`

	// UsageLimit A number of times this key can be used. The value of 0 indicates the unlimited usage.
	UsageLimit int `json:"usage_limit"`

	// UsedTimes Usage count of setup key
	UsedTimes int `json:"used_times"`

	// Valid Setup key validity status
	Valid bool `json:"valid"`
}

// SetupKeyRequest defines model for SetupKeyRequest.
type SetupKeyRequest struct {
	// AutoGroups List of group IDs to auto-assign to peers registered with this key
	AutoGroups []string `json:"auto_groups"`

	// Ephemeral Indicate that the peer will be ephemeral or not
	Ephemeral *bool `json:"ephemeral,omitempty"`

	// ExpiresIn Expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// Name Setup Key name
	Name string `json:"name"`

	// Revoked Setup key revocation status
	Revoked bool `json:"revoked"`

	// Type Setup key type, one-off for single time usage and reusable
	Type string `json:"type"`

	// UsageLimit A number of times this key can be used. The value of 0 indicates the unlimited usage.
	UsageLimit int `json:"usage_limit"`
}

// User defines model for User.
type User struct {
	// AutoGroups Group IDs to auto-assign to peers registered by this user
	AutoGroups []string `json:"auto_groups"`

	// Email User's email address
	Email string `json:"email"`

	// Id User ID
	Id string `json:"id"`

	// IsBlocked Is true if this user is blocked. Blocked users can't use the system
	IsBlocked bool `json:"is_blocked"`

	// IsCurrent Is true if authenticated user is the same as this user
	IsCurrent *bool `json:"is_current,omitempty"`

	// IsServiceUser Is true if this user is a service user
	IsServiceUser *bool `json:"is_service_user,omitempty"`

	// Issued How user was issued by API or Integration
	Issued *string `json:"issued,omitempty"`

	// LastLogin Last time this user performed a login to the dashboard
	LastLogin *time.Time `json:"last_login,omitempty"`

	// Name User's name from idp provider
	Name        string           `json:"name"`
	Permissions *UserPermissions `json:"permissions,omitempty"`

	// Role User's NetBird account role
	Role string `json:"role"`

	// Status User's status
	Status UserStatus `json:"status"`
}

// UserStatus User's status
type UserStatus string

// UserCreateRequest defines model for UserCreateRequest.
type UserCreateRequest struct {
	// AutoGroups Group IDs to auto-assign to peers registered by this user
	AutoGroups []string `json:"auto_groups"`

	// Email User's Email to send invite to
	Email *string `json:"email,omitempty"`

	// IsServiceUser Is true if this user is a service user
	IsServiceUser bool `json:"is_service_user"`

	// Name User's full name
	Name *string `json:"name,omitempty"`

	// Role User's NetBird account role
	Role string `json:"role"`
}

// UserPermissions defines model for UserPermissions.
type UserPermissions struct {
	// DashboardView User's permission to view the dashboard
	DashboardView *UserPermissionsDashboardView `json:"dashboard_view,omitempty"`
}

// UserPermissionsDashboardView User's permission to view the dashboard
type UserPermissionsDashboardView string

// UserRequest defines model for UserRequest.
type UserRequest struct {
	// AutoGroups Group IDs to auto-assign to peers registered by this user
	AutoGroups []string `json:"auto_groups"`

	// IsBlocked If set to true then user is blocked and can't use the system
	IsBlocked bool `json:"is_blocked"`

	// Role User's NetBird account role
	Role string `json:"role"`
}

// GetApiUsersParams defines parameters for GetApiUsers.
type GetApiUsersParams struct {
	// ServiceUser Filters users and returns either regular users or service users
	ServiceUser *bool `form:"service_user,omitempty" json:"service_user,omitempty"`
}

// PutApiAccountsAccountIdJSONRequestBody defines body for PutApiAccountsAccountId for application/json ContentType.
type PutApiAccountsAccountIdJSONRequestBody = AccountRequest

// PostApiDnsNameserversJSONRequestBody defines body for PostApiDnsNameservers for application/json ContentType.
type PostApiDnsNameserversJSONRequestBody = NameserverGroupRequest

// PutApiDnsNameserversNsgroupIdJSONRequestBody defines body for PutApiDnsNameserversNsgroupId for application/json ContentType.
type PutApiDnsNameserversNsgroupIdJSONRequestBody = NameserverGroupRequest

// PutApiDnsSettingsJSONRequestBody defines body for PutApiDnsSettings for application/json ContentType.
type PutApiDnsSettingsJSONRequestBody = DNSSettings

// PostApiGroupsJSONRequestBody defines body for PostApiGroups for application/json ContentType.
type PostApiGroupsJSONRequestBody = GroupRequest

// PutApiGroupsGroupIdJSONRequestBody defines body for PutApiGroupsGroupId for application/json ContentType.
type PutApiGroupsGroupIdJSONRequestBody = GroupRequest

// PutApiPeersPeerIdJSONRequestBody defines body for PutApiPeersPeerId for application/json ContentType.
type PutApiPeersPeerIdJSONRequestBody = PeerRequest

// PostApiPoliciesJSONRequestBody defines body for PostApiPolicies for application/json ContentType.
type PostApiPoliciesJSONRequestBody = PolicyUpdate

// PutApiPoliciesPolicyIdJSONRequestBody defines body for PutApiPoliciesPolicyId for application/json ContentType.
type PutApiPoliciesPolicyIdJSONRequestBody = PolicyUpdate

// PostApiPostureChecksJSONRequestBody defines body for PostApiPostureChecks for application/json ContentType.
type PostApiPostureChecksJSONRequestBody = PostureCheckUpdate

// PutApiPostureChecksPostureCheckIdJSONRequestBody defines body for PutApiPostureChecksPostureCheckId for application/json ContentType.
type PutApiPostureChecksPostureCheckIdJSONRequestBody = PostureCheckUpdate

// PostApiRoutesJSONRequestBody defines body for PostApiRoutes for application/json ContentType.
type PostApiRoutesJSONRequestBody = RouteRequest

// PutApiRoutesRouteIdJSONRequestBody defines body for PutApiRoutesRouteId for application/json ContentType.
type PutApiRoutesRouteIdJSONRequestBody = RouteRequest

// PostApiSetupKeysJSONRequestBody defines body for PostApiSetupKeys for application/json ContentType.
type PostApiSetupKeysJSONRequestBody = CreateSetupKeyRequest

// PutApiSetupKeysKeyIdJSONRequestBody defines body for PutApiSetupKeysKeyId for application/json ContentType.
type PutApiSetupKeysKeyIdJSONRequestBody = SetupKeyRequest

// PostApiUsersJSONRequestBody defines body for PostApiUsers for application/json ContentType.
type PostApiUsersJSONRequestBody = UserCreateRequest

// PutApiUsersUserIdJSONRequestBody defines body for PutApiUsersUserId for application/json ContentType.
type PutApiUsersUserIdJSONRequestBody = UserRequest

// PostApiUsersUserIdTokensJSONRequestBody defines body for PostApiUsersUserIdTokens for application/json ContentType.
type PostApiUsersUserIdTokensJSONRequestBody = PersonalAccessTokenRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiAccounts request
	GetApiAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiAccountsAccountId request
	DeleteApiAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiAccountsAccountIdWithBody request with any body
	PutApiAccountsAccountIdWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiAccountsAccountId(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsNameservers request
	GetApiDnsNameservers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDnsNameserversWithBody request with any body
	PostApiDnsNameserversWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDnsNameservers(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDnsNameserversNsgroupId request
	DeleteApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsNameserversNsgroupId request
	GetApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDnsNameserversNsgroupIdWithBody request with any body
	PutApiDnsNameserversNsgroupIdWithBody(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDnsSettings request
	GetApiDnsSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDnsSettingsWithBody request with any body
	PutApiDnsSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDnsSettings(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiEvents request
	GetApiEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGroups request
	GetApiGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiGroupsWithBody request with any body
	PostApiGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiGroups(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiGroupsGroupId request
	DeleteApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGroupsGroupId request
	GetApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiGroupsGroupIdWithBody request with any body
	PutApiGroupsGroupIdWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiGroupsGroupId(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLocationsCountries request
	GetApiLocationsCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLocationsCountriesCountryCities request
	GetApiLocationsCountriesCountryCities(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPeers request
	GetApiPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPeersPeerId request
	DeleteApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPeersPeerId request
	GetApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPeersPeerIdWithBody request with any body
	PutApiPeersPeerIdWithBody(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPeersPeerId(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPolicies request
	GetApiPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPoliciesWithBody request with any body
	PostApiPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPolicies(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPoliciesPolicyId request
	DeleteApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPoliciesPolicyId request
	GetApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPoliciesPolicyIdWithBody request with any body
	PutApiPoliciesPolicyIdWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPoliciesPolicyId(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPostureChecks request
	GetApiPostureChecks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPostureChecksWithBody request with any body
	PostApiPostureChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPostureChecks(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPostureChecksPostureCheckId request
	DeleteApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPostureChecksPostureCheckId request
	GetApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPostureChecksPostureCheckIdWithBody request with any body
	PutApiPostureChecksPostureCheckIdWithBody(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoutes request
	GetApiRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiRoutesWithBody request with any body
	PostApiRoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiRoutes(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiRoutesRouteId request
	DeleteApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiRoutesRouteId request
	GetApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiRoutesRouteIdWithBody request with any body
	PutApiRoutesRouteIdWithBody(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiRoutesRouteId(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSetupKeys request
	GetApiSetupKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSetupKeysWithBody request with any body
	PostApiSetupKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSetupKeys(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSetupKeysKeyId request
	GetApiSetupKeysKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiSetupKeysKeyIdWithBody request with any body
	PutApiSetupKeysKeyIdWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiSetupKeysKeyId(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsers request
	GetApiUsers(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersWithBody request with any body
	PostApiUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUsers(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiUsersUserId request
	DeleteApiUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiUsersUserIdWithBody request with any body
	PutApiUsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiUsersUserId(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersUserIdInvite request
	PostApiUsersUserIdInvite(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsersUserIdTokens request
	GetApiUsersUserIdTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersUserIdTokensWithBody request with any body
	PostApiUsersUserIdTokensWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiUsersUserIdTokens(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiUsersUserIdTokensTokenId request
	DeleteApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsersUserIdTokensTokenId request
	GetApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiAccountsAccountId(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiAccountsAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAccountsAccountIdWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAccountsAccountIdRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiAccountsAccountId(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiAccountsAccountIdRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsNameservers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsNameserversRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsNameserversWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsNameserversRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDnsNameservers(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDnsNameserversRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDnsNameserversNsgroupIdRequest(c.Server, nsgroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsNameserversNsgroupIdRequest(c.Server, nsgroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsNameserversNsgroupIdWithBody(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsNameserversNsgroupIdRequestWithBody(c.Server, nsgroupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsNameserversNsgroupId(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsNameserversNsgroupIdRequest(c.Server, nsgroupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDnsSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDnsSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDnsSettings(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDnsSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiGroups(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiGroupsGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiGroupsGroupId(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGroupsGroupIdRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiGroupsGroupIdWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiGroupsGroupIdRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiGroupsGroupId(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiGroupsGroupIdRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLocationsCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLocationsCountriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLocationsCountriesCountryCities(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLocationsCountriesCountryCitiesRequest(c.Server, country)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPeers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPeersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPeersPeerIdRequest(c.Server, peerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPeersPeerId(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPeersPeerIdRequest(c.Server, peerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPeersPeerIdWithBody(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPeersPeerIdRequestWithBody(c.Server, peerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPeersPeerId(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPeersPeerIdRequest(c.Server, peerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPolicies(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPoliciesPolicyIdRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPoliciesPolicyId(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPoliciesPolicyIdRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPoliciesPolicyIdWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPoliciesPolicyIdRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPoliciesPolicyId(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPoliciesPolicyIdRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPostureChecks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPostureChecksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPostureChecksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPostureChecksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPostureChecks(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPostureChecksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPostureChecksPostureCheckIdRequest(c.Server, postureCheckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPostureChecksPostureCheckIdRequest(c.Server, postureCheckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPostureChecksPostureCheckIdWithBody(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPostureChecksPostureCheckIdRequestWithBody(c.Server, postureCheckId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPostureChecksPostureCheckId(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPostureChecksPostureCheckIdRequest(c.Server, postureCheckId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoutes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoutesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoutesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoutesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiRoutes(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiRoutesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiRoutesRouteIdRequest(c.Server, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiRoutesRouteId(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRoutesRouteIdRequest(c.Server, routeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRoutesRouteIdWithBody(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRoutesRouteIdRequestWithBody(c.Server, routeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiRoutesRouteId(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiRoutesRouteIdRequest(c.Server, routeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSetupKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSetupKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSetupKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSetupKeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSetupKeys(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSetupKeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSetupKeysKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSetupKeysKeyIdRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSetupKeysKeyIdWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSetupKeysKeyIdRequestWithBody(c.Server, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiSetupKeysKeyId(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiSetupKeysKeyIdRequest(c.Server, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsers(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsers(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiUsersUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiUsersUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUsersUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUsersUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUsersUserId(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUsersUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersUserIdInvite(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersUserIdInviteRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsersUserIdTokens(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersUserIdTokensRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersUserIdTokensWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersUserIdTokensRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersUserIdTokens(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersUserIdTokensRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiUsersUserIdTokensTokenIdRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsersUserIdTokensTokenId(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersUserIdTokensTokenIdRequest(c.Server, userId, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiAccountsRequest generates requests for GetApiAccounts
func NewGetApiAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiAccountsAccountIdRequest generates requests for DeleteApiAccountsAccountId
func NewDeleteApiAccountsAccountIdRequest(server string, accountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiAccountsAccountIdRequest calls the generic PutApiAccountsAccountId builder with application/json body
func NewPutApiAccountsAccountIdRequest(server string, accountId string, body PutApiAccountsAccountIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiAccountsAccountIdRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewPutApiAccountsAccountIdRequestWithBody generates requests for PutApiAccountsAccountId with any type of body
func NewPutApiAccountsAccountIdRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountId", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDnsNameserversRequest generates requests for GetApiDnsNameservers
func NewGetApiDnsNameserversRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiDnsNameserversRequest calls the generic PostApiDnsNameservers builder with application/json body
func NewPostApiDnsNameserversRequest(server string, body PostApiDnsNameserversJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDnsNameserversRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiDnsNameserversRequestWithBody generates requests for PostApiDnsNameservers with any type of body
func NewPostApiDnsNameserversRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiDnsNameserversNsgroupIdRequest generates requests for DeleteApiDnsNameserversNsgroupId
func NewDeleteApiDnsNameserversNsgroupIdRequest(server string, nsgroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsgroupId", runtime.ParamLocationPath, nsgroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDnsNameserversNsgroupIdRequest generates requests for GetApiDnsNameserversNsgroupId
func NewGetApiDnsNameserversNsgroupIdRequest(server string, nsgroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsgroupId", runtime.ParamLocationPath, nsgroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDnsNameserversNsgroupIdRequest calls the generic PutApiDnsNameserversNsgroupId builder with application/json body
func NewPutApiDnsNameserversNsgroupIdRequest(server string, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDnsNameserversNsgroupIdRequestWithBody(server, nsgroupId, "application/json", bodyReader)
}

// NewPutApiDnsNameserversNsgroupIdRequestWithBody generates requests for PutApiDnsNameserversNsgroupId with any type of body
func NewPutApiDnsNameserversNsgroupIdRequestWithBody(server string, nsgroupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nsgroupId", runtime.ParamLocationPath, nsgroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/nameservers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDnsSettingsRequest generates requests for GetApiDnsSettings
func NewGetApiDnsSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDnsSettingsRequest calls the generic PutApiDnsSettings builder with application/json body
func NewPutApiDnsSettingsRequest(server string, body PutApiDnsSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDnsSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiDnsSettingsRequestWithBody generates requests for PutApiDnsSettings with any type of body
func NewPutApiDnsSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dns/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiEventsRequest generates requests for GetApiEvents
func NewGetApiEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGroupsRequest generates requests for GetApiGroups
func NewGetApiGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiGroupsRequest calls the generic PostApiGroups builder with application/json body
func NewPostApiGroupsRequest(server string, body PostApiGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiGroupsRequestWithBody generates requests for PostApiGroups with any type of body
func NewPostApiGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiGroupsGroupIdRequest generates requests for DeleteApiGroupsGroupId
func NewDeleteApiGroupsGroupIdRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiGroupsGroupIdRequest generates requests for GetApiGroupsGroupId
func NewGetApiGroupsGroupIdRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiGroupsGroupIdRequest calls the generic PutApiGroupsGroupId builder with application/json body
func NewPutApiGroupsGroupIdRequest(server string, groupId string, body PutApiGroupsGroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiGroupsGroupIdRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewPutApiGroupsGroupIdRequestWithBody generates requests for PutApiGroupsGroupId with any type of body
func NewPutApiGroupsGroupIdRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiLocationsCountriesRequest generates requests for GetApiLocationsCountries
func NewGetApiLocationsCountriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/locations/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiLocationsCountriesCountryCitiesRequest generates requests for GetApiLocationsCountriesCountryCities
func NewGetApiLocationsCountriesCountryCitiesRequest(server string, country Country) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "country", runtime.ParamLocationPath, country)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/locations/countries/%s/cities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPeersRequest generates requests for GetApiPeers
func NewGetApiPeersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiPeersPeerIdRequest generates requests for DeleteApiPeersPeerId
func NewDeleteApiPeersPeerIdRequest(server string, peerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "peerId", runtime.ParamLocationPath, peerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPeersPeerIdRequest generates requests for GetApiPeersPeerId
func NewGetApiPeersPeerIdRequest(server string, peerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "peerId", runtime.ParamLocationPath, peerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPeersPeerIdRequest calls the generic PutApiPeersPeerId builder with application/json body
func NewPutApiPeersPeerIdRequest(server string, peerId string, body PutApiPeersPeerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPeersPeerIdRequestWithBody(server, peerId, "application/json", bodyReader)
}

// NewPutApiPeersPeerIdRequestWithBody generates requests for PutApiPeersPeerId with any type of body
func NewPutApiPeersPeerIdRequestWithBody(server string, peerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "peerId", runtime.ParamLocationPath, peerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/peers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPoliciesRequest generates requests for GetApiPolicies
func NewGetApiPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPoliciesRequest calls the generic PostApiPolicies builder with application/json body
func NewPostApiPoliciesRequest(server string, body PostApiPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPoliciesRequestWithBody generates requests for PostApiPolicies with any type of body
func NewPostApiPoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPoliciesPolicyIdRequest generates requests for DeleteApiPoliciesPolicyId
func NewDeleteApiPoliciesPolicyIdRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPoliciesPolicyIdRequest generates requests for GetApiPoliciesPolicyId
func NewGetApiPoliciesPolicyIdRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPoliciesPolicyIdRequest calls the generic PutApiPoliciesPolicyId builder with application/json body
func NewPutApiPoliciesPolicyIdRequest(server string, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPoliciesPolicyIdRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewPutApiPoliciesPolicyIdRequestWithBody generates requests for PutApiPoliciesPolicyId with any type of body
func NewPutApiPoliciesPolicyIdRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPostureChecksRequest generates requests for GetApiPostureChecks
func NewGetApiPostureChecksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPostureChecksRequest calls the generic PostApiPostureChecks builder with application/json body
func NewPostApiPostureChecksRequest(server string, body PostApiPostureChecksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPostureChecksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiPostureChecksRequestWithBody generates requests for PostApiPostureChecks with any type of body
func NewPostApiPostureChecksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPostureChecksPostureCheckIdRequest generates requests for DeleteApiPostureChecksPostureCheckId
func NewDeleteApiPostureChecksPostureCheckIdRequest(server string, postureCheckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postureCheckId", runtime.ParamLocationPath, postureCheckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPostureChecksPostureCheckIdRequest generates requests for GetApiPostureChecksPostureCheckId
func NewGetApiPostureChecksPostureCheckIdRequest(server string, postureCheckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postureCheckId", runtime.ParamLocationPath, postureCheckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPostureChecksPostureCheckIdRequest calls the generic PutApiPostureChecksPostureCheckId builder with application/json body
func NewPutApiPostureChecksPostureCheckIdRequest(server string, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPostureChecksPostureCheckIdRequestWithBody(server, postureCheckId, "application/json", bodyReader)
}

// NewPutApiPostureChecksPostureCheckIdRequestWithBody generates requests for PutApiPostureChecksPostureCheckId with any type of body
func NewPutApiPostureChecksPostureCheckIdRequestWithBody(server string, postureCheckId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "postureCheckId", runtime.ParamLocationPath, postureCheckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/posture-checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiRoutesRequest generates requests for GetApiRoutes
func NewGetApiRoutesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiRoutesRequest calls the generic PostApiRoutes builder with application/json body
func NewPostApiRoutesRequest(server string, body PostApiRoutesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiRoutesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiRoutesRequestWithBody generates requests for PostApiRoutes with any type of body
func NewPostApiRoutesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiRoutesRouteIdRequest generates requests for DeleteApiRoutesRouteId
func NewDeleteApiRoutesRouteIdRequest(server string, routeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiRoutesRouteIdRequest generates requests for GetApiRoutesRouteId
func NewGetApiRoutesRouteIdRequest(server string, routeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiRoutesRouteIdRequest calls the generic PutApiRoutesRouteId builder with application/json body
func NewPutApiRoutesRouteIdRequest(server string, routeId string, body PutApiRoutesRouteIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiRoutesRouteIdRequestWithBody(server, routeId, "application/json", bodyReader)
}

// NewPutApiRoutesRouteIdRequestWithBody generates requests for PutApiRoutesRouteId with any type of body
func NewPutApiRoutesRouteIdRequestWithBody(server string, routeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "routeId", runtime.ParamLocationPath, routeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/routes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSetupKeysRequest generates requests for GetApiSetupKeys
func NewGetApiSetupKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSetupKeysRequest calls the generic PostApiSetupKeys builder with application/json body
func NewPostApiSetupKeysRequest(server string, body PostApiSetupKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSetupKeysRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiSetupKeysRequestWithBody generates requests for PostApiSetupKeys with any type of body
func NewPostApiSetupKeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSetupKeysKeyIdRequest generates requests for GetApiSetupKeysKeyId
func NewGetApiSetupKeysKeyIdRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiSetupKeysKeyIdRequest calls the generic PutApiSetupKeysKeyId builder with application/json body
func NewPutApiSetupKeysKeyIdRequest(server string, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiSetupKeysKeyIdRequestWithBody(server, keyId, "application/json", bodyReader)
}

// NewPutApiSetupKeysKeyIdRequestWithBody generates requests for PutApiSetupKeysKeyId with any type of body
func NewPutApiSetupKeysKeyIdRequestWithBody(server string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/setup-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiUsersRequest generates requests for GetApiUsers
func NewGetApiUsersRequest(server string, params *GetApiUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ServiceUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_user", runtime.ParamLocationQuery, *params.ServiceUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiUsersRequest calls the generic PostApiUsers builder with application/json body
func NewPostApiUsersRequest(server string, body PostApiUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiUsersRequestWithBody generates requests for PostApiUsers with any type of body
func NewPostApiUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiUsersUserIdRequest generates requests for DeleteApiUsersUserId
func NewDeleteApiUsersUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiUsersUserIdRequest calls the generic PutApiUsersUserId builder with application/json body
func NewPutApiUsersUserIdRequest(server string, userId string, body PutApiUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiUsersUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPutApiUsersUserIdRequestWithBody generates requests for PutApiUsersUserId with any type of body
func NewPutApiUsersUserIdRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiUsersUserIdInviteRequest generates requests for PostApiUsersUserIdInvite
func NewPostApiUsersUserIdInviteRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUsersUserIdTokensRequest generates requests for GetApiUsersUserIdTokens
func NewGetApiUsersUserIdTokensRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiUsersUserIdTokensRequest calls the generic PostApiUsersUserIdTokens builder with application/json body
func NewPostApiUsersUserIdTokensRequest(server string, userId string, body PostApiUsersUserIdTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiUsersUserIdTokensRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostApiUsersUserIdTokensRequestWithBody generates requests for PostApiUsersUserIdTokens with any type of body
func NewPostApiUsersUserIdTokensRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiUsersUserIdTokensTokenIdRequest generates requests for DeleteApiUsersUserIdTokensTokenId
func NewDeleteApiUsersUserIdTokensTokenIdRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUsersUserIdTokensTokenIdRequest generates requests for GetApiUsersUserIdTokensTokenId
func NewGetApiUsersUserIdTokensTokenIdRequest(server string, userId string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tokenId", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/%s/tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiAccountsWithResponse request
	GetApiAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAccountsResponse, error)

	// DeleteApiAccountsAccountIdWithResponse request
	DeleteApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteApiAccountsAccountIdResponse, error)

	// PutApiAccountsAccountIdWithBodyWithResponse request with any body
	PutApiAccountsAccountIdWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error)

	PutApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error)

	// GetApiDnsNameserversWithResponse request
	GetApiDnsNameserversWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversResponse, error)

	// PostApiDnsNameserversWithBodyWithResponse request with any body
	PostApiDnsNameserversWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error)

	PostApiDnsNameserversWithResponse(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error)

	// DeleteApiDnsNameserversNsgroupIdWithResponse request
	DeleteApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*DeleteApiDnsNameserversNsgroupIdResponse, error)

	// GetApiDnsNameserversNsgroupIdWithResponse request
	GetApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversNsgroupIdResponse, error)

	// PutApiDnsNameserversNsgroupIdWithBodyWithResponse request with any body
	PutApiDnsNameserversNsgroupIdWithBodyWithResponse(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error)

	PutApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error)

	// GetApiDnsSettingsWithResponse request
	GetApiDnsSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsSettingsResponse, error)

	// PutApiDnsSettingsWithBodyWithResponse request with any body
	PutApiDnsSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error)

	PutApiDnsSettingsWithResponse(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error)

	// GetApiEventsWithResponse request
	GetApiEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiEventsResponse, error)

	// GetApiGroupsWithResponse request
	GetApiGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGroupsResponse, error)

	// PostApiGroupsWithBodyWithResponse request with any body
	PostApiGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error)

	PostApiGroupsWithResponse(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error)

	// DeleteApiGroupsGroupIdWithResponse request
	DeleteApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*DeleteApiGroupsGroupIdResponse, error)

	// GetApiGroupsGroupIdWithResponse request
	GetApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetApiGroupsGroupIdResponse, error)

	// PutApiGroupsGroupIdWithBodyWithResponse request with any body
	PutApiGroupsGroupIdWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error)

	PutApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error)

	// GetApiLocationsCountriesWithResponse request
	GetApiLocationsCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesResponse, error)

	// GetApiLocationsCountriesCountryCitiesWithResponse request
	GetApiLocationsCountriesCountryCitiesWithResponse(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesCountryCitiesResponse, error)

	// GetApiPeersWithResponse request
	GetApiPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPeersResponse, error)

	// DeleteApiPeersPeerIdWithResponse request
	DeleteApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*DeleteApiPeersPeerIdResponse, error)

	// GetApiPeersPeerIdWithResponse request
	GetApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*GetApiPeersPeerIdResponse, error)

	// PutApiPeersPeerIdWithBodyWithResponse request with any body
	PutApiPeersPeerIdWithBodyWithResponse(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error)

	PutApiPeersPeerIdWithResponse(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error)

	// GetApiPoliciesWithResponse request
	GetApiPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPoliciesResponse, error)

	// PostApiPoliciesWithBodyWithResponse request with any body
	PostApiPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error)

	PostApiPoliciesWithResponse(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error)

	// DeleteApiPoliciesPolicyIdWithResponse request
	DeleteApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*DeleteApiPoliciesPolicyIdResponse, error)

	// GetApiPoliciesPolicyIdWithResponse request
	GetApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetApiPoliciesPolicyIdResponse, error)

	// PutApiPoliciesPolicyIdWithBodyWithResponse request with any body
	PutApiPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error)

	PutApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error)

	// GetApiPostureChecksWithResponse request
	GetApiPostureChecksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPostureChecksResponse, error)

	// PostApiPostureChecksWithBodyWithResponse request with any body
	PostApiPostureChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error)

	PostApiPostureChecksWithResponse(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error)

	// DeleteApiPostureChecksPostureCheckIdWithResponse request
	DeleteApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*DeleteApiPostureChecksPostureCheckIdResponse, error)

	// GetApiPostureChecksPostureCheckIdWithResponse request
	GetApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*GetApiPostureChecksPostureCheckIdResponse, error)

	// PutApiPostureChecksPostureCheckIdWithBodyWithResponse request with any body
	PutApiPostureChecksPostureCheckIdWithBodyWithResponse(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error)

	PutApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error)

	// GetApiRoutesWithResponse request
	GetApiRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRoutesResponse, error)

	// PostApiRoutesWithBodyWithResponse request with any body
	PostApiRoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error)

	PostApiRoutesWithResponse(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error)

	// DeleteApiRoutesRouteIdWithResponse request
	DeleteApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*DeleteApiRoutesRouteIdResponse, error)

	// GetApiRoutesRouteIdWithResponse request
	GetApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*GetApiRoutesRouteIdResponse, error)

	// PutApiRoutesRouteIdWithBodyWithResponse request with any body
	PutApiRoutesRouteIdWithBodyWithResponse(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error)

	PutApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error)

	// GetApiSetupKeysWithResponse request
	GetApiSetupKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSetupKeysResponse, error)

	// PostApiSetupKeysWithBodyWithResponse request with any body
	PostApiSetupKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error)

	PostApiSetupKeysWithResponse(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error)

	// GetApiSetupKeysKeyIdWithResponse request
	GetApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*GetApiSetupKeysKeyIdResponse, error)

	// PutApiSetupKeysKeyIdWithBodyWithResponse request with any body
	PutApiSetupKeysKeyIdWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error)

	PutApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error)

	// GetApiUsersWithResponse request
	GetApiUsersWithResponse(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*GetApiUsersResponse, error)

	// PostApiUsersWithBodyWithResponse request with any body
	PostApiUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error)

	PostApiUsersWithResponse(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error)

	// DeleteApiUsersUserIdWithResponse request
	DeleteApiUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdResponse, error)

	// PutApiUsersUserIdWithBodyWithResponse request with any body
	PutApiUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error)

	PutApiUsersUserIdWithResponse(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error)

	// PostApiUsersUserIdInviteWithResponse request
	PostApiUsersUserIdInviteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdInviteResponse, error)

	// GetApiUsersUserIdTokensWithResponse request
	GetApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensResponse, error)

	// PostApiUsersUserIdTokensWithBodyWithResponse request with any body
	PostApiUsersUserIdTokensWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error)

	PostApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error)

	// DeleteApiUsersUserIdTokensTokenIdWithResponse request
	DeleteApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdTokensTokenIdResponse, error)

	// GetApiUsersUserIdTokensTokenIdWithResponse request
	GetApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensTokenIdResponse, error)
}

type GetApiAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r GetApiAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiAccountsAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r PutApiAccountsAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiAccountsAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NameserverGroup
}

// Status returns HTTPResponse.Status
func (r GetApiDnsNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDnsNameserversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameserverGroup
}

// Status returns HTTPResponse.Status
func (r PostApiDnsNameserversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDnsNameserversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDnsNameserversNsgroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiDnsNameserversNsgroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDnsNameserversNsgroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsNameserversNsgroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameserverGroup
}

// Status returns HTTPResponse.Status
func (r GetApiDnsNameserversNsgroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsNameserversNsgroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDnsNameserversNsgroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameserverGroup
}

// Status returns HTTPResponse.Status
func (r PutApiDnsNameserversNsgroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDnsNameserversNsgroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDnsSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiDnsSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDnsSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDnsSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DNSSettings
}

// Status returns HTTPResponse.Status
func (r PutApiDnsSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDnsSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r GetApiEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r GetApiGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PostApiGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GetApiGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PutApiGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLocationsCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetApiLocationsCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLocationsCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLocationsCountriesCountryCitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *City
}

// Status returns HTTPResponse.Status
func (r GetApiLocationsCountriesCountryCitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLocationsCountriesCountryCitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PeerBatch
}

// Status returns HTTPResponse.Status
func (r GetApiPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPeersPeerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPeersPeerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPeersPeerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPeersPeerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Peer
}

// Status returns HTTPResponse.Status
func (r GetApiPeersPeerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPeersPeerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPeersPeerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Peer
}

// Status returns HTTPResponse.Status
func (r PutApiPeersPeerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPeersPeerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Policy
}

// Status returns HTTPResponse.Status
func (r GetApiPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r PostApiPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r GetApiPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPoliciesPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Policy
}

// Status returns HTTPResponse.Status
func (r PutApiPoliciesPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPoliciesPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPostureChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PostureCheck
}

// Status returns HTTPResponse.Status
func (r GetApiPostureChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPostureChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPostureChecksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostureCheck
}

// Status returns HTTPResponse.Status
func (r PostApiPostureChecksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPostureChecksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPostureChecksPostureCheckIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiPostureChecksPostureCheckIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPostureChecksPostureCheckIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPostureChecksPostureCheckIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostureCheck
}

// Status returns HTTPResponse.Status
func (r GetApiPostureChecksPostureCheckIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPostureChecksPostureCheckIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPostureChecksPostureCheckIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostureCheck
}

// Status returns HTTPResponse.Status
func (r PutApiPostureChecksPostureCheckIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPostureChecksPostureCheckIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Route
}

// Status returns HTTPResponse.Status
func (r GetApiRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
}

// Status returns HTTPResponse.Status
func (r PostApiRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiRoutesRouteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiRoutesRouteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiRoutesRouteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiRoutesRouteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
}

// Status returns HTTPResponse.Status
func (r GetApiRoutesRouteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiRoutesRouteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiRoutesRouteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Route
}

// Status returns HTTPResponse.Status
func (r PutApiRoutesRouteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiRoutesRouteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSetupKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SetupKey
}

// Status returns HTTPResponse.Status
func (r GetApiSetupKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSetupKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSetupKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupKey
}

// Status returns HTTPResponse.Status
func (r PostApiSetupKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSetupKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSetupKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupKey
}

// Status returns HTTPResponse.Status
func (r GetApiSetupKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSetupKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiSetupKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SetupKey
}

// Status returns HTTPResponse.Status
func (r PutApiSetupKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiSetupKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutApiUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersUserIdInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiUsersUserIdInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersUserIdInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersUserIdTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PersonalAccessToken
}

// Status returns HTTPResponse.Status
func (r GetApiUsersUserIdTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersUserIdTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersUserIdTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonalAccessTokenGenerated
}

// Status returns HTTPResponse.Status
func (r PostApiUsersUserIdTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersUserIdTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiUsersUserIdTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiUsersUserIdTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiUsersUserIdTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersUserIdTokensTokenIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PersonalAccessToken
}

// Status returns HTTPResponse.Status
func (r GetApiUsersUserIdTokensTokenIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersUserIdTokensTokenIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiAccountsWithResponse request returning *GetApiAccountsResponse
func (c *ClientWithResponses) GetApiAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAccountsResponse, error) {
	rsp, err := c.GetApiAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAccountsResponse(rsp)
}

// DeleteApiAccountsAccountIdWithResponse request returning *DeleteApiAccountsAccountIdResponse
func (c *ClientWithResponses) DeleteApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, reqEditors ...RequestEditorFn) (*DeleteApiAccountsAccountIdResponse, error) {
	rsp, err := c.DeleteApiAccountsAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiAccountsAccountIdResponse(rsp)
}

// PutApiAccountsAccountIdWithBodyWithResponse request with arbitrary body returning *PutApiAccountsAccountIdResponse
func (c *ClientWithResponses) PutApiAccountsAccountIdWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error) {
	rsp, err := c.PutApiAccountsAccountIdWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAccountsAccountIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiAccountsAccountIdWithResponse(ctx context.Context, accountId string, body PutApiAccountsAccountIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiAccountsAccountIdResponse, error) {
	rsp, err := c.PutApiAccountsAccountId(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiAccountsAccountIdResponse(rsp)
}

// GetApiDnsNameserversWithResponse request returning *GetApiDnsNameserversResponse
func (c *ClientWithResponses) GetApiDnsNameserversWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversResponse, error) {
	rsp, err := c.GetApiDnsNameservers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsNameserversResponse(rsp)
}

// PostApiDnsNameserversWithBodyWithResponse request with arbitrary body returning *PostApiDnsNameserversResponse
func (c *ClientWithResponses) PostApiDnsNameserversWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error) {
	rsp, err := c.PostApiDnsNameserversWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsNameserversResponse(rsp)
}

func (c *ClientWithResponses) PostApiDnsNameserversWithResponse(ctx context.Context, body PostApiDnsNameserversJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDnsNameserversResponse, error) {
	rsp, err := c.PostApiDnsNameservers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDnsNameserversResponse(rsp)
}

// DeleteApiDnsNameserversNsgroupIdWithResponse request returning *DeleteApiDnsNameserversNsgroupIdResponse
func (c *ClientWithResponses) DeleteApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*DeleteApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.DeleteApiDnsNameserversNsgroupId(ctx, nsgroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDnsNameserversNsgroupIdResponse(rsp)
}

// GetApiDnsNameserversNsgroupIdWithResponse request returning *GetApiDnsNameserversNsgroupIdResponse
func (c *ClientWithResponses) GetApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, reqEditors ...RequestEditorFn) (*GetApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.GetApiDnsNameserversNsgroupId(ctx, nsgroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsNameserversNsgroupIdResponse(rsp)
}

// PutApiDnsNameserversNsgroupIdWithBodyWithResponse request with arbitrary body returning *PutApiDnsNameserversNsgroupIdResponse
func (c *ClientWithResponses) PutApiDnsNameserversNsgroupIdWithBodyWithResponse(ctx context.Context, nsgroupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.PutApiDnsNameserversNsgroupIdWithBody(ctx, nsgroupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsNameserversNsgroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDnsNameserversNsgroupIdWithResponse(ctx context.Context, nsgroupId string, body PutApiDnsNameserversNsgroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsNameserversNsgroupIdResponse, error) {
	rsp, err := c.PutApiDnsNameserversNsgroupId(ctx, nsgroupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsNameserversNsgroupIdResponse(rsp)
}

// GetApiDnsSettingsWithResponse request returning *GetApiDnsSettingsResponse
func (c *ClientWithResponses) GetApiDnsSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiDnsSettingsResponse, error) {
	rsp, err := c.GetApiDnsSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDnsSettingsResponse(rsp)
}

// PutApiDnsSettingsWithBodyWithResponse request with arbitrary body returning *PutApiDnsSettingsResponse
func (c *ClientWithResponses) PutApiDnsSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error) {
	rsp, err := c.PutApiDnsSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutApiDnsSettingsWithResponse(ctx context.Context, body PutApiDnsSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDnsSettingsResponse, error) {
	rsp, err := c.PutApiDnsSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDnsSettingsResponse(rsp)
}

// GetApiEventsWithResponse request returning *GetApiEventsResponse
func (c *ClientWithResponses) GetApiEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiEventsResponse, error) {
	rsp, err := c.GetApiEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiEventsResponse(rsp)
}

// GetApiGroupsWithResponse request returning *GetApiGroupsResponse
func (c *ClientWithResponses) GetApiGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiGroupsResponse, error) {
	rsp, err := c.GetApiGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGroupsResponse(rsp)
}

// PostApiGroupsWithBodyWithResponse request with arbitrary body returning *PostApiGroupsResponse
func (c *ClientWithResponses) PostApiGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error) {
	rsp, err := c.PostApiGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostApiGroupsWithResponse(ctx context.Context, body PostApiGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiGroupsResponse, error) {
	rsp, err := c.PostApiGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiGroupsResponse(rsp)
}

// DeleteApiGroupsGroupIdWithResponse request returning *DeleteApiGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*DeleteApiGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteApiGroupsGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiGroupsGroupIdResponse(rsp)
}

// GetApiGroupsGroupIdWithResponse request returning *GetApiGroupsGroupIdResponse
func (c *ClientWithResponses) GetApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*GetApiGroupsGroupIdResponse, error) {
	rsp, err := c.GetApiGroupsGroupId(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGroupsGroupIdResponse(rsp)
}

// PutApiGroupsGroupIdWithBodyWithResponse request with arbitrary body returning *PutApiGroupsGroupIdResponse
func (c *ClientWithResponses) PutApiGroupsGroupIdWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error) {
	rsp, err := c.PutApiGroupsGroupIdWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiGroupsGroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiGroupsGroupIdWithResponse(ctx context.Context, groupId string, body PutApiGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiGroupsGroupIdResponse, error) {
	rsp, err := c.PutApiGroupsGroupId(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiGroupsGroupIdResponse(rsp)
}

// GetApiLocationsCountriesWithResponse request returning *GetApiLocationsCountriesResponse
func (c *ClientWithResponses) GetApiLocationsCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesResponse, error) {
	rsp, err := c.GetApiLocationsCountries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLocationsCountriesResponse(rsp)
}

// GetApiLocationsCountriesCountryCitiesWithResponse request returning *GetApiLocationsCountriesCountryCitiesResponse
func (c *ClientWithResponses) GetApiLocationsCountriesCountryCitiesWithResponse(ctx context.Context, country Country, reqEditors ...RequestEditorFn) (*GetApiLocationsCountriesCountryCitiesResponse, error) {
	rsp, err := c.GetApiLocationsCountriesCountryCities(ctx, country, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLocationsCountriesCountryCitiesResponse(rsp)
}

// GetApiPeersWithResponse request returning *GetApiPeersResponse
func (c *ClientWithResponses) GetApiPeersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPeersResponse, error) {
	rsp, err := c.GetApiPeers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPeersResponse(rsp)
}

// DeleteApiPeersPeerIdWithResponse request returning *DeleteApiPeersPeerIdResponse
func (c *ClientWithResponses) DeleteApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*DeleteApiPeersPeerIdResponse, error) {
	rsp, err := c.DeleteApiPeersPeerId(ctx, peerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPeersPeerIdResponse(rsp)
}

// GetApiPeersPeerIdWithResponse request returning *GetApiPeersPeerIdResponse
func (c *ClientWithResponses) GetApiPeersPeerIdWithResponse(ctx context.Context, peerId string, reqEditors ...RequestEditorFn) (*GetApiPeersPeerIdResponse, error) {
	rsp, err := c.GetApiPeersPeerId(ctx, peerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPeersPeerIdResponse(rsp)
}

// PutApiPeersPeerIdWithBodyWithResponse request with arbitrary body returning *PutApiPeersPeerIdResponse
func (c *ClientWithResponses) PutApiPeersPeerIdWithBodyWithResponse(ctx context.Context, peerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error) {
	rsp, err := c.PutApiPeersPeerIdWithBody(ctx, peerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPeersPeerIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPeersPeerIdWithResponse(ctx context.Context, peerId string, body PutApiPeersPeerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPeersPeerIdResponse, error) {
	rsp, err := c.PutApiPeersPeerId(ctx, peerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPeersPeerIdResponse(rsp)
}

// GetApiPoliciesWithResponse request returning *GetApiPoliciesResponse
func (c *ClientWithResponses) GetApiPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPoliciesResponse, error) {
	rsp, err := c.GetApiPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoliciesResponse(rsp)
}

// PostApiPoliciesWithBodyWithResponse request with arbitrary body returning *PostApiPoliciesResponse
func (c *ClientWithResponses) PostApiPoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error) {
	rsp, err := c.PostApiPoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PostApiPoliciesWithResponse(ctx context.Context, body PostApiPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPoliciesResponse, error) {
	rsp, err := c.PostApiPolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPoliciesResponse(rsp)
}

// DeleteApiPoliciesPolicyIdWithResponse request returning *DeleteApiPoliciesPolicyIdResponse
func (c *ClientWithResponses) DeleteApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*DeleteApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.DeleteApiPoliciesPolicyId(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPoliciesPolicyIdResponse(rsp)
}

// GetApiPoliciesPolicyIdWithResponse request returning *GetApiPoliciesPolicyIdResponse
func (c *ClientWithResponses) GetApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*GetApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.GetApiPoliciesPolicyId(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPoliciesPolicyIdResponse(rsp)
}

// PutApiPoliciesPolicyIdWithBodyWithResponse request with arbitrary body returning *PutApiPoliciesPolicyIdResponse
func (c *ClientWithResponses) PutApiPoliciesPolicyIdWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutApiPoliciesPolicyIdWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPoliciesPolicyIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPoliciesPolicyIdWithResponse(ctx context.Context, policyId string, body PutApiPoliciesPolicyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPoliciesPolicyIdResponse, error) {
	rsp, err := c.PutApiPoliciesPolicyId(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPoliciesPolicyIdResponse(rsp)
}

// GetApiPostureChecksWithResponse request returning *GetApiPostureChecksResponse
func (c *ClientWithResponses) GetApiPostureChecksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiPostureChecksResponse, error) {
	rsp, err := c.GetApiPostureChecks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPostureChecksResponse(rsp)
}

// PostApiPostureChecksWithBodyWithResponse request with arbitrary body returning *PostApiPostureChecksResponse
func (c *ClientWithResponses) PostApiPostureChecksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error) {
	rsp, err := c.PostApiPostureChecksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPostureChecksResponse(rsp)
}

func (c *ClientWithResponses) PostApiPostureChecksWithResponse(ctx context.Context, body PostApiPostureChecksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPostureChecksResponse, error) {
	rsp, err := c.PostApiPostureChecks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPostureChecksResponse(rsp)
}

// DeleteApiPostureChecksPostureCheckIdWithResponse request returning *DeleteApiPostureChecksPostureCheckIdResponse
func (c *ClientWithResponses) DeleteApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*DeleteApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.DeleteApiPostureChecksPostureCheckId(ctx, postureCheckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPostureChecksPostureCheckIdResponse(rsp)
}

// GetApiPostureChecksPostureCheckIdWithResponse request returning *GetApiPostureChecksPostureCheckIdResponse
func (c *ClientWithResponses) GetApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, reqEditors ...RequestEditorFn) (*GetApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.GetApiPostureChecksPostureCheckId(ctx, postureCheckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPostureChecksPostureCheckIdResponse(rsp)
}

// PutApiPostureChecksPostureCheckIdWithBodyWithResponse request with arbitrary body returning *PutApiPostureChecksPostureCheckIdResponse
func (c *ClientWithResponses) PutApiPostureChecksPostureCheckIdWithBodyWithResponse(ctx context.Context, postureCheckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.PutApiPostureChecksPostureCheckIdWithBody(ctx, postureCheckId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPostureChecksPostureCheckIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPostureChecksPostureCheckIdWithResponse(ctx context.Context, postureCheckId string, body PutApiPostureChecksPostureCheckIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPostureChecksPostureCheckIdResponse, error) {
	rsp, err := c.PutApiPostureChecksPostureCheckId(ctx, postureCheckId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPostureChecksPostureCheckIdResponse(rsp)
}

// GetApiRoutesWithResponse request returning *GetApiRoutesResponse
func (c *ClientWithResponses) GetApiRoutesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiRoutesResponse, error) {
	rsp, err := c.GetApiRoutes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoutesResponse(rsp)
}

// PostApiRoutesWithBodyWithResponse request with arbitrary body returning *PostApiRoutesResponse
func (c *ClientWithResponses) PostApiRoutesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error) {
	rsp, err := c.PostApiRoutesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoutesResponse(rsp)
}

func (c *ClientWithResponses) PostApiRoutesWithResponse(ctx context.Context, body PostApiRoutesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiRoutesResponse, error) {
	rsp, err := c.PostApiRoutes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiRoutesResponse(rsp)
}

// DeleteApiRoutesRouteIdWithResponse request returning *DeleteApiRoutesRouteIdResponse
func (c *ClientWithResponses) DeleteApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*DeleteApiRoutesRouteIdResponse, error) {
	rsp, err := c.DeleteApiRoutesRouteId(ctx, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiRoutesRouteIdResponse(rsp)
}

// GetApiRoutesRouteIdWithResponse request returning *GetApiRoutesRouteIdResponse
func (c *ClientWithResponses) GetApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, reqEditors ...RequestEditorFn) (*GetApiRoutesRouteIdResponse, error) {
	rsp, err := c.GetApiRoutesRouteId(ctx, routeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiRoutesRouteIdResponse(rsp)
}

// PutApiRoutesRouteIdWithBodyWithResponse request with arbitrary body returning *PutApiRoutesRouteIdResponse
func (c *ClientWithResponses) PutApiRoutesRouteIdWithBodyWithResponse(ctx context.Context, routeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error) {
	rsp, err := c.PutApiRoutesRouteIdWithBody(ctx, routeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRoutesRouteIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiRoutesRouteIdWithResponse(ctx context.Context, routeId string, body PutApiRoutesRouteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiRoutesRouteIdResponse, error) {
	rsp, err := c.PutApiRoutesRouteId(ctx, routeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiRoutesRouteIdResponse(rsp)
}

// GetApiSetupKeysWithResponse request returning *GetApiSetupKeysResponse
func (c *ClientWithResponses) GetApiSetupKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSetupKeysResponse, error) {
	rsp, err := c.GetApiSetupKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSetupKeysResponse(rsp)
}

// PostApiSetupKeysWithBodyWithResponse request with arbitrary body returning *PostApiSetupKeysResponse
func (c *ClientWithResponses) PostApiSetupKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error) {
	rsp, err := c.PostApiSetupKeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSetupKeysResponse(rsp)
}

func (c *ClientWithResponses) PostApiSetupKeysWithResponse(ctx context.Context, body PostApiSetupKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSetupKeysResponse, error) {
	rsp, err := c.PostApiSetupKeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSetupKeysResponse(rsp)
}

// GetApiSetupKeysKeyIdWithResponse request returning *GetApiSetupKeysKeyIdResponse
func (c *ClientWithResponses) GetApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*GetApiSetupKeysKeyIdResponse, error) {
	rsp, err := c.GetApiSetupKeysKeyId(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSetupKeysKeyIdResponse(rsp)
}

// PutApiSetupKeysKeyIdWithBodyWithResponse request with arbitrary body returning *PutApiSetupKeysKeyIdResponse
func (c *ClientWithResponses) PutApiSetupKeysKeyIdWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error) {
	rsp, err := c.PutApiSetupKeysKeyIdWithBody(ctx, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSetupKeysKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiSetupKeysKeyIdWithResponse(ctx context.Context, keyId string, body PutApiSetupKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiSetupKeysKeyIdResponse, error) {
	rsp, err := c.PutApiSetupKeysKeyId(ctx, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiSetupKeysKeyIdResponse(rsp)
}

// GetApiUsersWithResponse request returning *GetApiUsersResponse
func (c *ClientWithResponses) GetApiUsersWithResponse(ctx context.Context, params *GetApiUsersParams, reqEditors ...RequestEditorFn) (*GetApiUsersResponse, error) {
	rsp, err := c.GetApiUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersResponse(rsp)
}

// PostApiUsersWithBodyWithResponse request with arbitrary body returning *PostApiUsersResponse
func (c *ClientWithResponses) PostApiUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error) {
	rsp, err := c.PostApiUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersResponse(rsp)
}

func (c *ClientWithResponses) PostApiUsersWithResponse(ctx context.Context, body PostApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersResponse, error) {
	rsp, err := c.PostApiUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersResponse(rsp)
}

// DeleteApiUsersUserIdWithResponse request returning *DeleteApiUsersUserIdResponse
func (c *ClientWithResponses) DeleteApiUsersUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdResponse, error) {
	rsp, err := c.DeleteApiUsersUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiUsersUserIdResponse(rsp)
}

// PutApiUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutApiUsersUserIdResponse
func (c *ClientWithResponses) PutApiUsersUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error) {
	rsp, err := c.PutApiUsersUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiUsersUserIdWithResponse(ctx context.Context, userId string, body PutApiUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUsersUserIdResponse, error) {
	rsp, err := c.PutApiUsersUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUsersUserIdResponse(rsp)
}

// PostApiUsersUserIdInviteWithResponse request returning *PostApiUsersUserIdInviteResponse
func (c *ClientWithResponses) PostApiUsersUserIdInviteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdInviteResponse, error) {
	rsp, err := c.PostApiUsersUserIdInvite(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersUserIdInviteResponse(rsp)
}

// GetApiUsersUserIdTokensWithResponse request returning *GetApiUsersUserIdTokensResponse
func (c *ClientWithResponses) GetApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensResponse, error) {
	rsp, err := c.GetApiUsersUserIdTokens(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersUserIdTokensResponse(rsp)
}

// PostApiUsersUserIdTokensWithBodyWithResponse request with arbitrary body returning *PostApiUsersUserIdTokensResponse
func (c *ClientWithResponses) PostApiUsersUserIdTokensWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error) {
	rsp, err := c.PostApiUsersUserIdTokensWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersUserIdTokensResponse(rsp)
}

func (c *ClientWithResponses) PostApiUsersUserIdTokensWithResponse(ctx context.Context, userId string, body PostApiUsersUserIdTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiUsersUserIdTokensResponse, error) {
	rsp, err := c.PostApiUsersUserIdTokens(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersUserIdTokensResponse(rsp)
}

// DeleteApiUsersUserIdTokensTokenIdWithResponse request returning *DeleteApiUsersUserIdTokensTokenIdResponse
func (c *ClientWithResponses) DeleteApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*DeleteApiUsersUserIdTokensTokenIdResponse, error) {
	rsp, err := c.DeleteApiUsersUserIdTokensTokenId(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiUsersUserIdTokensTokenIdResponse(rsp)
}

// GetApiUsersUserIdTokensTokenIdWithResponse request returning *GetApiUsersUserIdTokensTokenIdResponse
func (c *ClientWithResponses) GetApiUsersUserIdTokensTokenIdWithResponse(ctx context.Context, userId string, tokenId string, reqEditors ...RequestEditorFn) (*GetApiUsersUserIdTokensTokenIdResponse, error) {
	rsp, err := c.GetApiUsersUserIdTokensTokenId(ctx, userId, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersUserIdTokensTokenIdResponse(rsp)
}

// ParseGetApiAccountsResponse parses an HTTP response from a GetApiAccountsWithResponse call
func ParseGetApiAccountsResponse(rsp *http.Response) (*GetApiAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiAccountsAccountIdResponse parses an HTTP response from a DeleteApiAccountsAccountIdWithResponse call
func ParseDeleteApiAccountsAccountIdResponse(rsp *http.Response) (*DeleteApiAccountsAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiAccountsAccountIdResponse parses an HTTP response from a PutApiAccountsAccountIdWithResponse call
func ParsePutApiAccountsAccountIdResponse(rsp *http.Response) (*PutApiAccountsAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiAccountsAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiDnsNameserversResponse parses an HTTP response from a GetApiDnsNameserversWithResponse call
func ParseGetApiDnsNameserversResponse(rsp *http.Response) (*GetApiDnsNameserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiDnsNameserversResponse parses an HTTP response from a PostApiDnsNameserversWithResponse call
func ParsePostApiDnsNameserversResponse(rsp *http.Response) (*PostApiDnsNameserversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDnsNameserversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiDnsNameserversNsgroupIdResponse parses an HTTP response from a DeleteApiDnsNameserversNsgroupIdWithResponse call
func ParseDeleteApiDnsNameserversNsgroupIdResponse(rsp *http.Response) (*DeleteApiDnsNameserversNsgroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDnsNameserversNsgroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiDnsNameserversNsgroupIdResponse parses an HTTP response from a GetApiDnsNameserversNsgroupIdWithResponse call
func ParseGetApiDnsNameserversNsgroupIdResponse(rsp *http.Response) (*GetApiDnsNameserversNsgroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsNameserversNsgroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiDnsNameserversNsgroupIdResponse parses an HTTP response from a PutApiDnsNameserversNsgroupIdWithResponse call
func ParsePutApiDnsNameserversNsgroupIdResponse(rsp *http.Response) (*PutApiDnsNameserversNsgroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDnsNameserversNsgroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameserverGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiDnsSettingsResponse parses an HTTP response from a GetApiDnsSettingsWithResponse call
func ParseGetApiDnsSettingsResponse(rsp *http.Response) (*GetApiDnsSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDnsSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiDnsSettingsResponse parses an HTTP response from a PutApiDnsSettingsWithResponse call
func ParsePutApiDnsSettingsResponse(rsp *http.Response) (*PutApiDnsSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDnsSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DNSSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiEventsResponse parses an HTTP response from a GetApiEventsWithResponse call
func ParseGetApiEventsResponse(rsp *http.Response) (*GetApiEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiGroupsResponse parses an HTTP response from a GetApiGroupsWithResponse call
func ParseGetApiGroupsResponse(rsp *http.Response) (*GetApiGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiGroupsResponse parses an HTTP response from a PostApiGroupsWithResponse call
func ParsePostApiGroupsResponse(rsp *http.Response) (*PostApiGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiGroupsGroupIdResponse parses an HTTP response from a DeleteApiGroupsGroupIdWithResponse call
func ParseDeleteApiGroupsGroupIdResponse(rsp *http.Response) (*DeleteApiGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiGroupsGroupIdResponse parses an HTTP response from a GetApiGroupsGroupIdWithResponse call
func ParseGetApiGroupsGroupIdResponse(rsp *http.Response) (*GetApiGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiGroupsGroupIdResponse parses an HTTP response from a PutApiGroupsGroupIdWithResponse call
func ParsePutApiGroupsGroupIdResponse(rsp *http.Response) (*PutApiGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiLocationsCountriesResponse parses an HTTP response from a GetApiLocationsCountriesWithResponse call
func ParseGetApiLocationsCountriesResponse(rsp *http.Response) (*GetApiLocationsCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLocationsCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiLocationsCountriesCountryCitiesResponse parses an HTTP response from a GetApiLocationsCountriesCountryCitiesWithResponse call
func ParseGetApiLocationsCountriesCountryCitiesResponse(rsp *http.Response) (*GetApiLocationsCountriesCountryCitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLocationsCountriesCountryCitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest City
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPeersResponse parses an HTTP response from a GetApiPeersWithResponse call
func ParseGetApiPeersResponse(rsp *http.Response) (*GetApiPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PeerBatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiPeersPeerIdResponse parses an HTTP response from a DeleteApiPeersPeerIdWithResponse call
func ParseDeleteApiPeersPeerIdResponse(rsp *http.Response) (*DeleteApiPeersPeerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPeersPeerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPeersPeerIdResponse parses an HTTP response from a GetApiPeersPeerIdWithResponse call
func ParseGetApiPeersPeerIdResponse(rsp *http.Response) (*GetApiPeersPeerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPeersPeerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPeersPeerIdResponse parses an HTTP response from a PutApiPeersPeerIdWithResponse call
func ParsePutApiPeersPeerIdResponse(rsp *http.Response) (*PutApiPeersPeerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPeersPeerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Peer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPoliciesResponse parses an HTTP response from a GetApiPoliciesWithResponse call
func ParseGetApiPoliciesResponse(rsp *http.Response) (*GetApiPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPoliciesResponse parses an HTTP response from a PostApiPoliciesWithResponse call
func ParsePostApiPoliciesResponse(rsp *http.Response) (*PostApiPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiPoliciesPolicyIdResponse parses an HTTP response from a DeleteApiPoliciesPolicyIdWithResponse call
func ParseDeleteApiPoliciesPolicyIdResponse(rsp *http.Response) (*DeleteApiPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPoliciesPolicyIdResponse parses an HTTP response from a GetApiPoliciesPolicyIdWithResponse call
func ParseGetApiPoliciesPolicyIdResponse(rsp *http.Response) (*GetApiPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPoliciesPolicyIdResponse parses an HTTP response from a PutApiPoliciesPolicyIdWithResponse call
func ParsePutApiPoliciesPolicyIdResponse(rsp *http.Response) (*PutApiPoliciesPolicyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPoliciesPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Policy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiPostureChecksResponse parses an HTTP response from a GetApiPostureChecksWithResponse call
func ParseGetApiPostureChecksResponse(rsp *http.Response) (*GetApiPostureChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPostureChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiPostureChecksResponse parses an HTTP response from a PostApiPostureChecksWithResponse call
func ParsePostApiPostureChecksResponse(rsp *http.Response) (*PostApiPostureChecksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPostureChecksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiPostureChecksPostureCheckIdResponse parses an HTTP response from a DeleteApiPostureChecksPostureCheckIdWithResponse call
func ParseDeleteApiPostureChecksPostureCheckIdResponse(rsp *http.Response) (*DeleteApiPostureChecksPostureCheckIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPostureChecksPostureCheckIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiPostureChecksPostureCheckIdResponse parses an HTTP response from a GetApiPostureChecksPostureCheckIdWithResponse call
func ParseGetApiPostureChecksPostureCheckIdResponse(rsp *http.Response) (*GetApiPostureChecksPostureCheckIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPostureChecksPostureCheckIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiPostureChecksPostureCheckIdResponse parses an HTTP response from a PutApiPostureChecksPostureCheckIdWithResponse call
func ParsePutApiPostureChecksPostureCheckIdResponse(rsp *http.Response) (*PutApiPostureChecksPostureCheckIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPostureChecksPostureCheckIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostureCheck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiRoutesResponse parses an HTTP response from a GetApiRoutesWithResponse call
func ParseGetApiRoutesResponse(rsp *http.Response) (*GetApiRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiRoutesResponse parses an HTTP response from a PostApiRoutesWithResponse call
func ParsePostApiRoutesResponse(rsp *http.Response) (*PostApiRoutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiRoutesRouteIdResponse parses an HTTP response from a DeleteApiRoutesRouteIdWithResponse call
func ParseDeleteApiRoutesRouteIdResponse(rsp *http.Response) (*DeleteApiRoutesRouteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiRoutesRouteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiRoutesRouteIdResponse parses an HTTP response from a GetApiRoutesRouteIdWithResponse call
func ParseGetApiRoutesRouteIdResponse(rsp *http.Response) (*GetApiRoutesRouteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiRoutesRouteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiRoutesRouteIdResponse parses an HTTP response from a PutApiRoutesRouteIdWithResponse call
func ParsePutApiRoutesRouteIdResponse(rsp *http.Response) (*PutApiRoutesRouteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiRoutesRouteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSetupKeysResponse parses an HTTP response from a GetApiSetupKeysWithResponse call
func ParseGetApiSetupKeysResponse(rsp *http.Response) (*GetApiSetupKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSetupKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiSetupKeysResponse parses an HTTP response from a PostApiSetupKeysWithResponse call
func ParsePostApiSetupKeysResponse(rsp *http.Response) (*PostApiSetupKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSetupKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSetupKeysKeyIdResponse parses an HTTP response from a GetApiSetupKeysKeyIdWithResponse call
func ParseGetApiSetupKeysKeyIdResponse(rsp *http.Response) (*GetApiSetupKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSetupKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiSetupKeysKeyIdResponse parses an HTTP response from a PutApiSetupKeysKeyIdWithResponse call
func ParsePutApiSetupKeysKeyIdResponse(rsp *http.Response) (*PutApiSetupKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiSetupKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SetupKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiUsersResponse parses an HTTP response from a GetApiUsersWithResponse call
func ParseGetApiUsersResponse(rsp *http.Response) (*GetApiUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUsersResponse parses an HTTP response from a PostApiUsersWithResponse call
func ParsePostApiUsersResponse(rsp *http.Response) (*PostApiUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiUsersUserIdResponse parses an HTTP response from a DeleteApiUsersUserIdWithResponse call
func ParseDeleteApiUsersUserIdResponse(rsp *http.Response) (*DeleteApiUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiUsersUserIdResponse parses an HTTP response from a PutApiUsersUserIdWithResponse call
func ParsePutApiUsersUserIdResponse(rsp *http.Response) (*PutApiUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUsersUserIdInviteResponse parses an HTTP response from a PostApiUsersUserIdInviteWithResponse call
func ParsePostApiUsersUserIdInviteResponse(rsp *http.Response) (*PostApiUsersUserIdInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersUserIdInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiUsersUserIdTokensResponse parses an HTTP response from a GetApiUsersUserIdTokensWithResponse call
func ParseGetApiUsersUserIdTokensResponse(rsp *http.Response) (*GetApiUsersUserIdTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersUserIdTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PersonalAccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiUsersUserIdTokensResponse parses an HTTP response from a PostApiUsersUserIdTokensWithResponse call
func ParsePostApiUsersUserIdTokensResponse(rsp *http.Response) (*PostApiUsersUserIdTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersUserIdTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonalAccessTokenGenerated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiUsersUserIdTokensTokenIdResponse parses an HTTP response from a DeleteApiUsersUserIdTokensTokenIdWithResponse call
func ParseDeleteApiUsersUserIdTokensTokenIdResponse(rsp *http.Response) (*DeleteApiUsersUserIdTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiUsersUserIdTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiUsersUserIdTokensTokenIdResponse parses an HTTP response from a GetApiUsersUserIdTokensTokenIdWithResponse call
func ParseGetApiUsersUserIdTokensTokenIdResponse(rsp *http.Response) (*GetApiUsersUserIdTokensTokenIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersUserIdTokensTokenIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PersonalAccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
